<?php

/**
 * ProductoDestacadoTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductoDestacadoTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ProductoDestacadoTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ProductoDestacado');
    }

    public function existByIdAndTipo($id)
    {
        $q = $this->createQuery('q')
            ->where('q.producto_id = ?', $id)
            ->andWhere('q.producto_tipo_dos_id IS NOT NULL OR q.producto_tipo_tres_id IS NOT NULL')
            ->andWhere('q.combinado = ?', Producto::COMBINADO_NULO);

        return $q->count();
    }

    public function existByIdAndProducto($id)
    {
        $q = $this->createQuery('q')
            ->where('q.producto_id = ?', $id)
            ->andWhere('q.name IS NOT NULL')

            ->andWhere('q.combinado = ?', Producto::COMBINADO_NULO);

        return $q->count();
    }

    public function existByIdAndMarca($id)
    {
        $q = $this->createQuery('q')
            ->where('q.producto_id = ?', $id)
            ->andWhere('q.marca IS NOT NULL')
            ->andWhere('q.combinado = ?', Producto::COMBINADO_NULO);

        return $q->count();
    }

    public function existByMarcaAndTipo($id)
    {
        $q = $this->createQuery('q')
            ->where('q.producto_id = ?', $id)
            ->andWhere('q.combinado = ?', Producto::COMBINADO_MARCA);

        return $q->count();
    }


    public function findByProductoIdAndTipo($id)
    {
        $q = $this->createQuery('q')
            ->where('q.producto_id = ?', $id)
            ->andWhere('q.producto_tipo_dos_id IS NOT NULL OR q.producto_tipo_tres_id IS NOT NULL')
            ->andWhere('q.combinado = ?', Producto::COMBINADO_NULO);


        return $q->fetchOne();
    }

    public function findByProductoIdAndMarca($id)
    {
        $q = $this->createQuery('q')
            ->where('q.producto_id = ?', $id)
            ->andWhere('q.marca IS  NOT NULL')
            ->andWhere('q.combinado = ?', Producto::COMBINADO_NULO);

        return $q->fetchOne();

    }

    public function findByMarcaAndTipo(Producto $producto)
    {
        $q = $this->createQuery('q')
            ->where('q.producto_id = ?', $producto->getId())
            ->andWhere('q.marca  = ?', $producto->getMarca())
            ->andWhere('q.combinado = ?', Producto::COMBINADO_MARCA);

        return $q->fetchOne();

    }

    public function findByProducto($producto_id)
    {
        $q = $this->createQuery('q')
            ->where('q.producto_id = ?', $producto_id)
            ->andWhere('q.name IS NOT NULL')
            ->andWhere('q.combinado = ?', Producto::COMBINADO_NULO);

        return $q->fetchOne();

    }

    public function getProductoTipo(Producto $producto)
    {
        $q = $this->createQuery('q');
        if ($producto->hasActividad()) {
            $q->where('q.producto_tipo_tres_id = ?', $producto->getProductoTipoTresId());
        } else {
            $q->where('q.producto_tipo_dos_id = ?', $producto->getProductoTipoDosId());
        }

        $q->andWhere('q.combinado = ?', Producto::COMBINADO_NULO)
            ->orderBy('rank');

        return $q->execute();
    }

    public function getProducto($name)
    {
        $q = $this->createQuery('q');
        $q->andWhere('q.name = ?', $name)
            ->andWhere('q.combinado = ?', Producto::COMBINADO_NULO)
            ->orderBy('rank');

        return $q->execute();
    }

    public function getMarcaAndTipo(Producto $producto)
    {
        $q = $this->createQuery('q');
        if ($producto->hasActividad()) {
            $q->where('q.producto_tipo_tres_id = ?', $producto->getProductoTipoTresId());
        } else {
            $q->where('q.producto_tipo_dos_id = ?', $producto->getProductoTipoDosId());
        }

        $q->andWhere('q.combinado = ?', Producto::COMBINADO_MARCA)
            ->andWhere('q.marca = ?', $producto->getMarca())
            ->orderBy('rank');

        return $q->execute();
    }

    public function countTipo($producto)
    {
        $q = $this->createQuery('q');
        if ($producto->hasActividad()) {
            $q->where('q.producto_tipo_tres_id = ?', $producto->getProductoTipoTresId());
        } else {
            $q->where('q.producto_tipo_dos_id = ?', $producto->getProductoTipoDosId());
        }
        $q->andWhere('q.combinado = ?', Producto::COMBINADO_NULO);

        return $q->count();
    }

    public function getProductoMarca($marca)
    {
        $q = $this->createQuery('q')
            ->where('q.marca = ?', $marca);

        $q->andWhere('q.combinado = ?', Producto::COMBINADO_NULO)
            ->orderBy('rank');
        return $q->execute();
    }

    public function countMarca($marca)
    {
        $q = $this->createQuery('q')
            ->where('q.marca = ?', $marca);
        $q->andWhere('q.combinado = ?', Producto::COMBINADO_NULO);
        return $q->count();
    }

    public function countProducto($name)
    {
        $q = $this->createQuery('q')
            ->where('q.name = ?', $name)
            ->andWhere('q.combinado = ?', Producto::COMBINADO_NULO);
        return $q->count();
    }

    public function countMarcaAndTipo(Producto $producto)
    {
        $q = $this->createQuery('q')
            ->where('q.marca = ?', $producto->getMarca());
        if ($producto->hasActividad()) {
            $q->andWhere('q.producto_tipo_tres_id = ?', $producto->getProductoTipoTresId());
        } else {
            $q->andWhere('q.producto_tipo_dos_id = ?', $producto->getProductoTipoDosId());
        }
        $q->andWhere('q.combinado = ?', Producto::COMBINADO_MARCA);

        return $q->count();
    }

    /**
     * A partir un array de id de empresas crear el orden.
     * @param string tipo: empresa_sector_dos, empresa_sector_tres, provincia, localidad
     * @param array $empresas
     */
    public function setOrder($tipo, $id, $productos)
    {
        $tipoOptions = array('producto_tipo_dos', 'producto_tipo_tres', 'marca', 'nombre', 'marcaTipo');
        if (!in_array($tipo, $tipoOptions)) {
            throw new sfException(sprintf('El tipo enviado (%s) no es valido', $tipo));
        }
        // 1. borra registros anteriores del orden
        foreach ($productos as $producto_id) {
            $q = Doctrine_Query::create()->update('ProductoDestacado')
                ->set('rank', 0)
                ->andWhere('producto_id = ?', $producto_id);
            if ($tipo == 'marca') {
                $q->andwhere('marca = ?', $id);
            } elseif ($tipo == 'marcaTipo') {
                $q->andwhere('combinado = ?', Producto::COMBINADO_MARCA);
            } elseif ($tipo == 'nombre') {
                $q->andwhere('name = ?', $id);
            } else {
                $q->andWhere($tipo . '_id = ?', $id);

            }
            $q->execute();
        }
        // 2. setea nuevo orden
        $i = 1;
        foreach ($productos as $producto_id) {
            $q = Doctrine_Query::create()->update('ProductoDestacado')
                ->set('rank', $i)
                ->andWhere('producto_id = ?', $producto_id);
            if ($tipo == 'marca') {
                $q->andwhere('marca = ?', $id);
            } elseif ($tipo == 'nombre') {
                $q->andWhere('name = ?', $id);
            } else {
                $q->andWhere($tipo . '_id = ?', $id);

            }
            $q->execute();
            $i++;
        }
    }

    /**
     * return the last rank for the conditions
     * @static
     *
     */
    public static function getLastRank($producto, $tipo)
    {
        /** @var Doctrine_Query $q */
        $q = self::getInstance()->createQuery('q')
            ->select('MAX(rank)');
        switch ($tipo) {
            case 'tipo':
                if ($producto->hasActividad()) {
                    $q->where('q.producto_tipo_tres_id = ?', $producto->getProductoTipoTresId());
                } else {
                    $q->where('q.producto_tipo_dos_id = ?', $producto->getProductoTipoDosId());
                }
                break;

            case 'marca':
                $q->where('q.marca = ?', $producto->getMarca());
                break;

            case 'marcaTipo':
                $q->where('q.marca = ?', $producto->getMarca())
                    ->andWhere('q.combinado = ?', Producto::COMBINADO_MARCA);

                break;
            case 'producto':
                $q->where('q.name = ?', $producto->getName());
                break;

        }

        $q->limit(1);

        $rank = $q->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY_SHALLOW);
        return $rank['MAX'];
    }


}