<?php

/**
 * ProfesionalDestacadaTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProfesionalDestacadaTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ProfesionalDestacadaTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ProfesionalDestacada');
    }
    
    public function existById($id)
    {
        $q = $this->createQuery('q')
            ->where('q.profesional_id = ?', $id)
            ->andWhere('q.city_id IS NULL')
            ->andWhere('q.states_id IS NULL')
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO);

        return $q->count();
    }

    public function existByIdAndLocalidad($id)
    {
        $q = $this->createQuery('q')
            ->where('q.profesional_id = ?', $id)
            ->andWhere('q.city_id IS NOT NULL')
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO);

        return $q->count();
    }

    public function existByIdAndProvincia($id)
    {
        $q = $this->createQuery('q')
            ->where('q.profesional_id = ?', $id)
            ->andWhere('q.states_id IS NOT NULL')
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO);


        return $q->count();
    }

    public function existBySectorAndProvincia($profesional_id)
    {
        $q = $this->createQuery('q')
            ->where('q.profesional_id = ?', $profesional_id)
            ->andwhere('q.combinado = ?', Profesional::COMBINADO_PROVINCIA);

        return $q->count();
    }

    public function existBySectorAndLocalidad($profesional_id)
    {
        $q = $this->createQuery('q')
            ->where('q.profesional_id = ?', $profesional_id)
            ->andwhere('q.combinado = ?', Profesional::COMBINADO_LOCALIDAD);

        return $q->count();
    }

    public function findByProfesionalIdAndProvincia($id)
    {
        $q = $this->createQuery('q')
            ->where('q.profesional_id = ?', $id)
            ->andWhere('q.states_id IS NOT NULL')
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO);


        return $q->execute();
    }

    public function findByProfesionalIdAndLocalidad($id)
    {
        $q = $this->createQuery('q')
            ->where('q.profesional_id = ?', $id)
            ->andWhere('q.city_id IS NOT NULL')
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO);


        return $q->execute();
    }

    public function findByProfesionalIdAndSector($id)
    {
        $q = $this->createQuery('q')
            ->where('q.profesional_id = ?', $id)
            ->andWhere('q.city_id IS NULL')
            ->andWhere('q.states_id IS NULL')
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO);


        return $q->execute();
    }

    public function findByProfesionalIdAndSectorProvincia($id)
    {
        $q = $this->createQuery('q')
            ->where('q.profesional_id = ?', $id)
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_PROVINCIA);

        return $q->execute();
    }

    public function findByProfesionalIdAndSectorLocalidad($id)
    {
        $q = $this->createQuery('q')
            ->where('q.profesional_id = ?', $id)
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_LOCALIDAD);

        return $q->execute();
    }

    public function countProfesionalProvincia($states_id)
    {
        $q = $this->createQuery('q')
            ->where('q.states_id = ?', $states_id)
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO);


        return $q->count();
    }

    public function countProfesionalLocalidad($localidad_id)
    {
        $q = $this->createQuery('q')
            ->where('q.city_id = ?', $localidad_id)
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO);

        return $q->count();
    }

    public function countProfesionalSector(Profesional $profesional)
    {
        $q = $this->createQuery('q');

        if ($profesional->getProfesionalTipoTres()->getId()) {
            $q->where('q.profesional_tipo_tres_id = ?', $profesional->getProfesionalTipoTresId());
        } else {
            $q->where('q.profesional_tipo_dos_id = ?', $profesional->getProfesionalTipoDosId());
        }
        $q->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO);

        return $q->count();

    }

    public function countProfesionalSectorProvincia(Profesional $profesional)
    {
        $q = $this->createQuery('q');
        $q->where('q.combinado = ?', Profesional::COMBINADO_PROVINCIA);
        if ($profesional->getProfesionalTipoTres()->getId()) {
            $q->andWhere('q.profesional_tipo_tres_id = ?', $profesional->getProfesionalTipoTresId());
        } else {
            $q->andWhere('q.profesional_tipo_dos_id = ?', $profesional->getProfesionalTipoDosId());
        }

        return $q->count();
    }

    public function countProfesionalSectorLocalidad(Profesional $profesional)
    {
        $q = $this->createQuery('q');
        $q->where('q.combinado = ?', Profesional::COMBINADO_LOCALIDAD);
        if ($profesional->getProfesionalTipoTres()->getId()) {
            $q->andWhere('q.profesional_tipo_tres_id = ?', $profesional->getProfesionalTipoTresId());
        } else {
            $q->andWhere('q.profesional_tipo_dos_id = ?', $profesional->getProfesionalTipoDosId());
        }

        return $q->count();
    }

    public function getProfesionalSector(Profesional $profesional)
    {
        $q = $this->createQuery('q');
        if ($profesional->getProfesionalTipoTres()->getId()) {
            $q->where('q.profesional_tipo_tres_id = ?', $profesional->getProfesionalTipoTresId());
        } else {
            $q->where('q.profesional_tipo_dos_id = ?', $profesional->getProfesionalTipoDosId());
        }
        $q->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO)
            ->orderBy('rank');

        return $q->execute();
    }

    public function getProfesionalSectorAndProvincia(Profesional $profesional)
    {
        $q = $this->createQuery('q');
        if ($profesional->getProfesionalTipoTres()->getId()) {
            $q->where('q.profesional_tipo_tres_id = ?', $profesional->getProfesionalTipoTresId());
        } else {
            $q->where('q.profesional_tipo_dos_id = ?', $profesional->getProfesionalTipoDosId());
        }
        $q->andwhere('q.states_id = ?', $profesional->getStatesId())
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_PROVINCIA)
            ->orderBy('rank');

        return $q->execute();

    }

    public function getProfesionalSectorAndLocalidad(Profesional $profesional)
    {
        $q = $this->createQuery('q');
        if ($profesional->getProfesionalTipoTres()->getId()) {
            $q->where('q.profesional_tipo_tres_id = ?', $profesional->getProfesionalTipoTresId());
        } else {
            $q->where('q.profesional_tipo_dos_id = ?', $profesional->getProfesionalTipoDosId());
        }
        $q->andwhere('q.city_id = ?', $profesional->getCityId())
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_LOCALIDAD)
            ->orderBy('rank');

        return $q->execute();

    }


    public function getProfesionalProvincia($states_id)
    {
        $q = $this->createQuery('q')
            ->where('q.states_id = ?', $states_id)
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO)
            ->orderBy('q.rank', 'ASC');

        return $q->execute();
    }

    public function getProfesionalLocalidad($localidad_id)
    {
        $q = $this->createQuery('q')
            ->where('q.city_id = ?', $localidad_id)
            ->andWhere('q.combinado = ?', Profesional::COMBINADO_NULO)
            ->orderBy('rank');

        return $q->execute();
    }

    /**
     * A partir un array de id de profesional crear el orden.
     * @param string tipo: profesional_tipo_dos, profesional_tipo_tres, provincia, localidad
     * @param array $profesionales
     */
    public function setOrder($tipo, $id, $profesionales)
    {

        $tipoOptions = array('profesional_tipo_dos', 'profesional_tipo_tres', 'states', 'city', 'combinadoProvincia', 'combinadoLocalidad');
        if (!in_array($tipo, $tipoOptions)) {
            throw new sfException(sprintf('El tipo enviado (%s) no es valido', $tipo));
        }
        // 1. borra registros anteriores del orden
        foreach ($profesionales as $profesional_id) {

            $q = Doctrine_Query::create()->update('ProfesionalDestacada')
                ->set('rank', 0);
            if ($tipo == 'combinadoProvincia') {
                $q->where('combinado = ?', Profesional::COMBINADO_PROVINCIA);
            } elseif($tipo == 'combinadoLocalidad') {
                $q->where('combinado = ?', Profesional::COMBINADO_LOCALIDAD);

            } else {
                $q->where($tipo . '_id = ?', $id);
            }
            $q->andWhere('profesional_id = ?', $profesional_id);
            $q->execute();
        }
        // 2. setea nuevo orden
        $i = 1;
        foreach ($profesionales as $profesional_id) {
            $q = Doctrine_Query::create()->update('ProfesionalDestacada')
                ->set('rank', $i);
            if ($tipo == 'combinadoProvincia') {
                $q->where('combinado = ?', Profesional::COMBINADO_PROVINCIA);
            } elseif ($tipo == 'combinadoLocalidad') {
                $q->where('combinado = ?', Profesional::COMBINADO_LOCALIDAD);

            } else {
                $q->where($tipo . '_id = ?', $id);
            }
            $q->andWhere('profesional_id = ?', $profesional_id);
            $q->execute();
            $i++;
        }
    }

    /**
     * return the last rank for the conditions
     * @static
     *
     */
    public static function getLastRank($profesional, $tipo)
    {
        /** @var Doctrine_Query $q */
        $q = self::getInstance()->createQuery('q')
            ->select('MAX(rank)');
        switch ($tipo) {
            case 'sector';
                if ($profesional->hasActividad()) {
                    $q->where('q.profesional_tipo_tres_id = ?', $profesional->getProfesionalTipoTresId());
                } else {
                    $q->where('q.profesional_tipo_dos_id = ?', $profesional->getProfesionalTipoDosId());

                }
                break;
            case 'provincia':
                $q->where('q.states_id = ?', $profesional->getStatesId());
                break;
            case 'localidad':
                $q->where('q.city_id = ?', $profesional->getCityId());
                break;

            case 'sector_provincia':
                $q->where('q.combinado = ?', Profesional::COMBINADO_PROVINCIA)
                    ->andWhere('q.states_id = ?', $profesional->getStatesId());
                break;
            case 'sector_localidad':
                $q->where('q.combinado = ?', Profesional::COMBINADO_LOCALIDAD)
                    ->andWhere('q.city_id = ?', $profesional->getCityId());
                break;
        }
        $q->limit(1);

        $rank = $q->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY_SHALLOW);
        return $rank['MAX'];
    }
}
