<?php

/**
 * BaseProfesionalLetter
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $description
 * @property string $plan_accion
 * @property date $fecha_activacion
 * @property date $fecha_referendum
 * @property datetime $fecha_revision
 * @property datetime $fecha_deliberacion
 * @property datetime $fecha_observacion
 * @property datetime $fecha_cerrado
 * @property datetime $fecha_rechazado
 * @property datetime $fecha_nulo
 * @property boolean $is_first
 * @property integer $revision_last_state_id
 * @property integer $profesional_letter_estado_id
 * @property integer $profesional_letter_type_id
 * @property integer $profesional_activa_desa_id
 * @property integer $profesional_apro_despro_id
 * @property integer $profesional_id
 * @property integer $states_id
 * @property integer $city_id
 * @property integer $user_id
 * @property sfGuardUser $User
 * @property States $States
 * @property City $City
 * @property ProfesionalLetterType $ProfesionalLetterType
 * @property ProfesionalAproDespro $ProfesionalAproDespro
 * @property Profesional $Profesional
 * @property ProfesionalLetterEstado $ProfesionalLetterEstado
 * @property Doctrine_Collection $ProfesionalLetterArchivo
 * @property Doctrine_Collection $ProfesionalLetterHistorico
 * 
 * @method string                  getName()                         Returns the current record's "name" value
 * @method string                  getDescription()                  Returns the current record's "description" value
 * @method string                  getPlanAccion()                   Returns the current record's "plan_accion" value
 * @method date                    getFechaActivacion()              Returns the current record's "fecha_activacion" value
 * @method date                    getFechaReferendum()              Returns the current record's "fecha_referendum" value
 * @method datetime                getFechaRevision()                Returns the current record's "fecha_revision" value
 * @method datetime                getFechaDeliberacion()            Returns the current record's "fecha_deliberacion" value
 * @method datetime                getFechaObservacion()             Returns the current record's "fecha_observacion" value
 * @method datetime                getFechaCerrado()                 Returns the current record's "fecha_cerrado" value
 * @method datetime                getFechaRechazado()               Returns the current record's "fecha_rechazado" value
 * @method datetime                getFechaNulo()                    Returns the current record's "fecha_nulo" value
 * @method boolean                 getIsFirst()                      Returns the current record's "is_first" value
 * @method integer                 getRevisionLastStateId()          Returns the current record's "revision_last_state_id" value
 * @method integer                 getProfesionalLetterEstadoId()    Returns the current record's "profesional_letter_estado_id" value
 * @method integer                 getProfesionalLetterTypeId()      Returns the current record's "profesional_letter_type_id" value
 * @method integer                 getProfesionalActivaDesaId()      Returns the current record's "profesional_activa_desa_id" value
 * @method integer                 getProfesionalAproDesproId()      Returns the current record's "profesional_apro_despro_id" value
 * @method integer                 getProfesionalId()                Returns the current record's "profesional_id" value
 * @method integer                 getStatesId()                     Returns the current record's "states_id" value
 * @method integer                 getCityId()                       Returns the current record's "city_id" value
 * @method integer                 getUserId()                       Returns the current record's "user_id" value
 * @method sfGuardUser             getUser()                         Returns the current record's "User" value
 * @method States                  getStates()                       Returns the current record's "States" value
 * @method City                    getCity()                         Returns the current record's "City" value
 * @method ProfesionalLetterType   getProfesionalLetterType()        Returns the current record's "ProfesionalLetterType" value
 * @method ProfesionalAproDespro   getProfesionalAproDespro()        Returns the current record's "ProfesionalAproDespro" value
 * @method Profesional             getProfesional()                  Returns the current record's "Profesional" value
 * @method ProfesionalLetterEstado getProfesionalLetterEstado()      Returns the current record's "ProfesionalLetterEstado" value
 * @method Doctrine_Collection     getProfesionalLetterArchivo()     Returns the current record's "ProfesionalLetterArchivo" collection
 * @method Doctrine_Collection     getProfesionalLetterHistorico()   Returns the current record's "ProfesionalLetterHistorico" collection
 * @method ProfesionalLetter       setName()                         Sets the current record's "name" value
 * @method ProfesionalLetter       setDescription()                  Sets the current record's "description" value
 * @method ProfesionalLetter       setPlanAccion()                   Sets the current record's "plan_accion" value
 * @method ProfesionalLetter       setFechaActivacion()              Sets the current record's "fecha_activacion" value
 * @method ProfesionalLetter       setFechaReferendum()              Sets the current record's "fecha_referendum" value
 * @method ProfesionalLetter       setFechaRevision()                Sets the current record's "fecha_revision" value
 * @method ProfesionalLetter       setFechaDeliberacion()            Sets the current record's "fecha_deliberacion" value
 * @method ProfesionalLetter       setFechaObservacion()             Sets the current record's "fecha_observacion" value
 * @method ProfesionalLetter       setFechaCerrado()                 Sets the current record's "fecha_cerrado" value
 * @method ProfesionalLetter       setFechaRechazado()               Sets the current record's "fecha_rechazado" value
 * @method ProfesionalLetter       setFechaNulo()                    Sets the current record's "fecha_nulo" value
 * @method ProfesionalLetter       setIsFirst()                      Sets the current record's "is_first" value
 * @method ProfesionalLetter       setRevisionLastStateId()          Sets the current record's "revision_last_state_id" value
 * @method ProfesionalLetter       setProfesionalLetterEstadoId()    Sets the current record's "profesional_letter_estado_id" value
 * @method ProfesionalLetter       setProfesionalLetterTypeId()      Sets the current record's "profesional_letter_type_id" value
 * @method ProfesionalLetter       setProfesionalActivaDesaId()      Sets the current record's "profesional_activa_desa_id" value
 * @method ProfesionalLetter       setProfesionalAproDesproId()      Sets the current record's "profesional_apro_despro_id" value
 * @method ProfesionalLetter       setProfesionalId()                Sets the current record's "profesional_id" value
 * @method ProfesionalLetter       setStatesId()                     Sets the current record's "states_id" value
 * @method ProfesionalLetter       setCityId()                       Sets the current record's "city_id" value
 * @method ProfesionalLetter       setUserId()                       Sets the current record's "user_id" value
 * @method ProfesionalLetter       setUser()                         Sets the current record's "User" value
 * @method ProfesionalLetter       setStates()                       Sets the current record's "States" value
 * @method ProfesionalLetter       setCity()                         Sets the current record's "City" value
 * @method ProfesionalLetter       setProfesionalLetterType()        Sets the current record's "ProfesionalLetterType" value
 * @method ProfesionalLetter       setProfesionalAproDespro()        Sets the current record's "ProfesionalAproDespro" value
 * @method ProfesionalLetter       setProfesional()                  Sets the current record's "Profesional" value
 * @method ProfesionalLetter       setProfesionalLetterEstado()      Sets the current record's "ProfesionalLetterEstado" value
 * @method ProfesionalLetter       setProfesionalLetterArchivo()     Sets the current record's "ProfesionalLetterArchivo" collection
 * @method ProfesionalLetter       setProfesionalLetterHistorico()   Sets the current record's "ProfesionalLetterHistorico" collection
 * 
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProfesionalLetter extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('profesional_letter');
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('description', 'string', 2147483647, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 2147483647,
             ));
        $this->hasColumn('plan_accion', 'string', 2147483647, array(
             'type' => 'string',
             'notnull' => false,
             'length' => 2147483647,
             ));
        $this->hasColumn('fecha_activacion', 'date', null, array(
             'type' => 'date',
             'notnull' => false,
             ));
        $this->hasColumn('fecha_referendum', 'date', null, array(
             'type' => 'date',
             'notnull' => false,
             ));
        $this->hasColumn('fecha_revision', 'datetime', null, array(
             'type' => 'datetime',
             'notnull' => false,
             ));
        $this->hasColumn('fecha_deliberacion', 'datetime', null, array(
             'type' => 'datetime',
             'notnull' => false,
             ));
        $this->hasColumn('fecha_observacion', 'datetime', null, array(
             'type' => 'datetime',
             'notnull' => false,
             ));
        $this->hasColumn('fecha_cerrado', 'datetime', null, array(
             'type' => 'datetime',
             'notnull' => false,
             ));
        $this->hasColumn('fecha_rechazado', 'datetime', null, array(
             'type' => 'datetime',
             'notnull' => false,
             ));
        $this->hasColumn('fecha_nulo', 'datetime', null, array(
             'type' => 'datetime',
             'notnull' => false,
             ));
        $this->hasColumn('is_first', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => false,
             ));
        $this->hasColumn('revision_last_state_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('profesional_letter_estado_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('profesional_letter_type_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('profesional_activa_desa_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('profesional_apro_despro_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('profesional_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('states_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('city_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('user_id', 'integer', 5, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 5,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'cascade'));

        $this->hasOne('States', array(
             'local' => 'states_id',
             'foreign' => 'id',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('City', array(
             'local' => 'city_id',
             'foreign' => 'id',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('ProfesionalLetterType', array(
             'local' => 'profesional_letter_type_id',
             'foreign' => 'id',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('ProfesionalAproDespro', array(
             'local' => 'profesional_apro_despro_id',
             'foreign' => 'id',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('Profesional', array(
             'local' => 'profesional_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('ProfesionalLetterEstado', array(
             'local' => 'profesional_letter_estado_id',
             'foreign' => 'id',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('ProfesionalLetterArchivo', array(
             'local' => 'id',
             'foreign' => 'profesional_letter_id'));

        $this->hasMany('ProfesionalLetterHistorico', array(
             'local' => 'id',
             'foreign' => 'profesional_letter_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}