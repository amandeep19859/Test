<?php

/**
 * BaseCity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property boolean $is_capital
 * @property integer $states_id
 * @property States $States
 * @property Doctrine_Collection $Concurso
 * @property Doctrine_Collection $sfGuardUserProfile
 * @property Doctrine_Collection $ConcursoCp
 * @property Doctrine_Collection $UserNotification
 * @property Doctrine_Collection $GiftRedemption
 * @property Doctrine_Collection $Profesional
 * @property Doctrine_Collection $ProfesionalLetter
 * @property Doctrine_Collection $Empresa
 * @property Doctrine_Collection $CompanyCaseStudy
 * @property Doctrine_Collection $UserCompanyCaseStudy
 * @property Doctrine_Collection $UserCompanyCaseStudyRequest
 * 
 * @method string              getName()                        Returns the current record's "name" value
 * @method boolean             getIsCapital()                   Returns the current record's "is_capital" value
 * @method integer             getStatesId()                    Returns the current record's "states_id" value
 * @method States              getStates()                      Returns the current record's "States" value
 * @method Doctrine_Collection getConcurso()                    Returns the current record's "Concurso" collection
 * @method Doctrine_Collection getSfGuardUserProfile()          Returns the current record's "sfGuardUserProfile" collection
 * @method Doctrine_Collection getConcursoCp()                  Returns the current record's "ConcursoCp" collection
 * @method Doctrine_Collection getUserNotification()            Returns the current record's "UserNotification" collection
 * @method Doctrine_Collection getGiftRedemption()              Returns the current record's "GiftRedemption" collection
 * @method Doctrine_Collection getProfesional()                 Returns the current record's "Profesional" collection
 * @method Doctrine_Collection getProfesionalLetter()           Returns the current record's "ProfesionalLetter" collection
 * @method Doctrine_Collection getEmpresa()                     Returns the current record's "Empresa" collection
 * @method Doctrine_Collection getCompanyCaseStudy()            Returns the current record's "CompanyCaseStudy" collection
 * @method Doctrine_Collection getUserCompanyCaseStudy()        Returns the current record's "UserCompanyCaseStudy" collection
 * @method Doctrine_Collection getUserCompanyCaseStudyRequest() Returns the current record's "UserCompanyCaseStudyRequest" collection
 * @method City                setName()                        Sets the current record's "name" value
 * @method City                setIsCapital()                   Sets the current record's "is_capital" value
 * @method City                setStatesId()                    Sets the current record's "states_id" value
 * @method City                setStates()                      Sets the current record's "States" value
 * @method City                setConcurso()                    Sets the current record's "Concurso" collection
 * @method City                setSfGuardUserProfile()          Sets the current record's "sfGuardUserProfile" collection
 * @method City                setConcursoCp()                  Sets the current record's "ConcursoCp" collection
 * @method City                setUserNotification()            Sets the current record's "UserNotification" collection
 * @method City                setGiftRedemption()              Sets the current record's "GiftRedemption" collection
 * @method City                setProfesional()                 Sets the current record's "Profesional" collection
 * @method City                setProfesionalLetter()           Sets the current record's "ProfesionalLetter" collection
 * @method City                setEmpresa()                     Sets the current record's "Empresa" collection
 * @method City                setCompanyCaseStudy()            Sets the current record's "CompanyCaseStudy" collection
 * @method City                setUserCompanyCaseStudy()        Sets the current record's "UserCompanyCaseStudy" collection
 * @method City                setUserCompanyCaseStudyRequest() Sets the current record's "UserCompanyCaseStudyRequest" collection
 * 
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCity extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('city');
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 100,
             ));
        $this->hasColumn('is_capital', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('states_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('States', array(
             'local' => 'states_id',
             'foreign' => 'id',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('Concurso', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('sfGuardUserProfile', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('ConcursoCp', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('UserNotification', array(
             'local' => 'id',
             'foreign' => 'concurso_empresa_ciudad_id'));

        $this->hasMany('GiftRedemption', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('Profesional', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('ProfesionalLetter', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('Empresa', array(
             'local' => 'id',
             'foreign' => 'localidad_id'));

        $this->hasMany('CompanyCaseStudy', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('UserCompanyCaseStudy', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('UserCompanyCaseStudyRequest', array(
             'local' => 'id',
             'foreign' => 'city_id'));
    }
}