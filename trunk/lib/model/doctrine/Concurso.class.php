<?php

/**
 * Concurso
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    symfony
 * @subpackage model
 * @author     calambrenet <calambrenet@codefriends.es>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Concurso extends BaseConcurso {

    const CONTEST_STATUS_MAGAZINE = 'Revista';
    const CONTEST_STATUS_ACTIVE = 'Activo';
    const CONTEST_STATUS_REFERENDUM = 'Referéndum';
    const CONTEST_STATUS_DELIBERATION = 'Deliberación';
    const CONTEST_STATUS_OBSERVATION = 'Observación';
    const CONTEST_STATUS_CLOSDE = 'Cerrado';
    const CONTEST_STATUS_REJECTED = 'Rechazado';
    const CONTEST_STATUS_NULL = 'Nulo';
    const CONTEST_STATUS_DRAFT = 'Borrador';
    const CONTEST_STATUS_REVISED = 'Revision';

    public function getTipodestacado() {
        if ($this->getDestacado())
            return 'SI';
        else {
            if ($destacado = Doctrine::getTable('ConcursosDestacadosTemporales')->createQuery()->where('concurso_id=?', $this->getId())->fetchOne()) {
                $tipo_tiempo = $destacado->getTipoTiempoId();
                if ($tipo_tiempo == 1) {
                    return '<img src="/images/check_green.gif" />';
                } else if ($tipo_tiempo == 2) {
                    return '<img src="/images/check_blue.gif" />';
                } else if ($tipo_tiempo == 3) {
                    return '<img src="/images/check_red.gif" />';
                }
            }

            return '';
        }
    }

    public function getTipodestacadoTiempo() {
        if ($destacado = Doctrine::getTable('ConcursosDestacadosTemporales')->createQuery()->where('concurso_id=?', $this->getId())->fetchOne()) {

            return $destacado->getTipoTiempoId();
        }

        return false;
    }

    public function getUsername() {
        if ($this->getUserId()) {
            return $this->getUser()->getUsername();
        }
    }

    public function getResumeName() {
        if ($this->getName()) {
            return $this->getName();
        }
    }

    public function contribucionesActivas() {

    }

    public function getContribucionesActivas() {
        return Doctrine::getTable('contribucion')
                        ->createQuery()
                        ->where('concurso_id = ?', $this->getId())
                        ->andWhere('contribucion_estado_id=?', 2)
                        ->execute();
    }

    public function getVotosUsuario($user_id) {
        return Doctrine::getTable('ConcursoReferendum')
                        ->createQuery()->where('concurso_id=?', $this->id)
                        ->andWhere('user_id=?', $user_id)
                        ->execute();
    }

    public function getNumeroVotacionesUsuario($user_id) {
        return Doctrine::getTable('ConcursoReferendum')->createQuery()
                        ->where('concurso_id=?', $this->id)
                        ->andWhere('user_id=?', $user_id)
                        ->count();
    }

    /**
     * Devuelve true si el concurso está destacado para semana, mes o año
     *
     * @param integer $tiempo values 1 => 'semana', 2 => 'mes', 3 => 'año'
     *
     * @return true or false
     */
    public function isConcursoDestacadoTiempo($tiempo) {
        $query = Doctrine::getTable("ConcursosDestacadosTemporales")->createQuery()->where("concurso_id=?", $this->id)->andWhere("tipo_tiempo_id=?", $tiempo);

        if ($query->count()) {
            return true;
        }

        return false;
    }

    public function getReferendumResult($limit = null) {
        $q = Doctrine_Query::create()
                ->select('c.contribucion_id as contribucion_id, u.id as user_id, u.username as username, o.concurso_id as concurso_id, o.name as contribucion_name, SUM(value) as puntos, COUNT(value) as votos')
                ->from('ConcursoReferendum c')
                ->innerJoin('c.Contribucion o')
                ->innerJoin('o.User u')
                ->where('concurso_id=' . $this->getId())
                ->groupBy('contribucion_id')
                ->orderBy('puntos desc, votos desc');

        if ($limit) {
            $q->limit($limit);
        }


        return $q->setHydrationMode(DOCTRINE::HYDRATE_ARRAY)->execute();
    }

    public function getVotosReferendum($user_id) {
        $sql = 'SELECT c.contribucion_id as contribucion_id, c2.concurso_id as concurso_id, c.value as puntos, c2.name as name, s.username as username
                FROM concurso_referendum c
                INNER JOIN contribucion c2 ON c.contribucion_id = c2.id
                INNER JOIN sf_guard_user s ON c2.user_id = s.id
                WHERE c.concurso_id=? and c.user_id=?
                ORDER BY puntos desc';
        return Doctrine_Manager::getInstance()->getCurrentConnection()->fetchAssoc($sql, array($this->id, $user_id));
    }

    public function asignarPuntosGanadores() {
        $tabla_codigos_puntos = array(
            0 => array('user_ganador_concurso', 'user_segu_concurso', 'user_terc_concurso'),
            1 => array('user_ganador_concurso', 'user_segu_concurso', 'user_terc_concurso'),
            2 => array('user_ganador_concurso_mes', 'user_segu_concurso_mes', 'user_terc_concurso_mes'),
            3 => array('user_gan_concurso_anio', 'user_segundo_concurso_anio', 'user_terc_concurso_anio')
        );

        $ganadores = $this->getReferendumResult(3);
        foreach ($ganadores as $i => $ganador) {
            $codigo_puntos = $tabla_codigos_puntos[$this->getTipodestacadoTiempo()][$i];
            $puntos = ColaboradorPuntoDefinicionTable::getPuntosbyCodigo($codigo_puntos);
            if ($puntos > 0) {
                doctrine::getTable('sfGuardUserProfile')->find($ganador['user_id'])->setPuntos($puntos);
                $msg = ColaboradorPuntoDefinicionTable::getDescripcionbyCodigo($codigo_puntos);
                ColaboradorPuntosHistoricoTable::new_log($ganador['user_id'], $msg, $puntos);
            }
        }
    }

    public function getGanadores() {
        return $this->getReferendumResult(3);
    }

    public function getVotosTotales() {
        $votos = Doctrine::getTable("ConcursoReferendum")->createQuery()->where("concurso_id=?", $this->id)->groupBy('user_id');

        // se hace esta guarrería porque no funciona correctamente el count()... Mirar porque pasa...
        $num_votos = 0;
        foreach ($votos->execute() as $voto) {
            $num_votos++;
        }

        return $num_votos;
    }

    public function repartirBeneficio($concurso_beneficio) {
        foreach ($this->getGanadores() as $puesto => $ganador) {
            $porcentaje = array(1 => 48, 2 => 24, 3 => 16);
            $colaborador = sfGuardUserProfileTable::find($ganador['user_id']);
            if ($colaborador) {
                $colaborador->setBeneficio($porcentaje[$puesto], $concurso_beneficio->beneficio);
                $colaborador->save();
            }
        }
    }

    public function getContribucionEnesima($n) {
        return Doctrine_Query::create()->from('Contribucion')->where('concurso_id = ?', $this->getId())->andWhere('numero = ?', $n)->fetchOne();
    }

    public function getContribucionPrincipal() {
        return $this->getContribucionEnesima(1);
    }

    public function ArchivosSubidos() {
        return $query = Doctrine::getTable("ConcursoArchivo")->createQuery()->where("concurso_id=$this->id")->execute();
    }

    public function getNumRespuestasConcurso() {
        return Doctrine::getTable("CuestionarioRespuestas")->getNumRespuestasConcurso($this->getId());
    }

    public function getArchivos() {
        return Doctrine::getTable('ConcursoArchivo')->createQuery()->where('concurso_id=?', $this->getId())->andWhere('file!="null"')->execute();
    }

    public function getFilesNames() {
        $names = array();
        if ($files = doctrine::getTable('ConcursoArchivo')->findBy('concurso_id', $this->getId())) {
            foreach ($files as $f) {
                $names[] = $f->getFile();
            }
        }
        return $names;
    }

    /**
     * Devuelve el nombre el slug del producto o la empresa del concurso
     */
    public function getProducto_or_Empresa_NameSlug() {
        if ($this->getProductoId())
            return $this->getProducto()->getSlug();
        elseif ($this->getEmpresaId())
            return $this->getEmpresa()->getSlug();
        else
            return 'error';
    }

    public function ratioParticipacion() {
        // Número de colaboradores que pueden participar en un referendum para este concurso
        $total = Doctrine::getTable('Contribucion')->createQuery()
                ->select('COUNT(DISTINCT user_id)')
                ->where('concurso_id=?', $this->getId())
                ->andWhere('contribucion_estado_id=2')
                ->execute(null, DOCTRINE::HYDRATE_SINGLE_SCALAR);

        // Número de colaboradores que han votado en el concurso (al menos han asignado un punto a alguna de sus contribuciones)
        $votantes = $this->getNumeroVotantes();

        return 100 * $votantes / $total;
    }

    public function getNombreAndItemAsociado() {
        $nombre = $this->getProducto_or_Empresa_NameSlug();
        if ($nombre != 'error') {
            return $this->getName() . ' (' . $nombre . ')';
        }
    }

    public function getCityId() {
        /*
          if ($this->getStatesId() == 16) //ceuta
          return 5884;
          elseif ($this->getStatesId() == 35) //melilla
          return 5885;
          elseif ($this->getStatesId() == 1) //melilla
          return 1;
          else
         */
        return $this->_get('city_id');
    }

    /**
     * Devuelve la ciudad y, si es distinta, la provincia
     *
     * @return string
     */
    public function getCityandState() {
        if ($this->getStatesId() == 1) { // Opción TODAS
            return 'Toda España';
        } else {
            $city = $this->getCity();
            if (is_object($city)) {
                $CityandState = '';
                if (NULL == $city->getName() || $city->getId() == 1) { // Opción TODAS
                    $CityandState = 'Provincia de ' . $this->getStates()->getName();
                } else {
                    $CityandState = $city->getName();
                    if (1 != $this->getCity()->getIsCapital()) {
                        $CityandState .= ' (' . $city->getStates()->getName() . ')';
                    }
                }
                return $CityandState;
            } else {
                return $this->getEmpresa()->getCityValue();
            }
        }
    }

    public function getStateValue() {
        if ($this->getStatesId() == 1) { // Opción TODAS
            return 'Toda España';
        } else {
            $city = $this->getCity();
            if (is_object($city)) {
                $CityandState = '';
                if (NULL == $city->getName() || $city->getId() == 1) { // Opción TODAS
                    $CityandState = 'Provincia de ' . $this->getStates()->getName();
                } else {
                    if (1 != $this->getCity()->getIsCapital()) {
                        $CityandState .= ' (' . $city->getStates()->getName() . ')';
                    }
                }
                return $CityandState;
            }
        }
    }

    public function getCityValue() {
        return $this->getCity();
    }

    public function getCpMunicipioProvinciaCongi() {
        //si no hay localidad (caso solo para "toda españa") devuelve la provincia.
        $html = '';

        /*   if (null != $this->getCodigopostal()) {
          $html .= $this->getCodigopostal() . ' ';
          } */
        if ($this->getCityId() == '') {
            $html .= $this->getStates();
            return $html;
        }


        if ($this->getCity()->getIsCapital()) {
            $html .= $this->getCity();

            return $html;
        } else {
            $html .= $this->getCity() . ' (';
            $html .= $this->getStates() . ')';
            return $html;
        }

        return $this->getLocalidad();
    }

    public function getArrFechasReactivaciones() {
        $fechas = Doctrine::getTable('ConcursoHistorico')->findByConcursoIdAndEstadoInicial($this->getId(), 10);

        $arr = array();
        foreach ($fechas as $fecha) {
            $arr[] = $fecha->date;
        }

        return $arr;
    }

    public function getArrFechasRevisiones() {
        $fechas = Doctrine::getTable('ConcursoHistorico')->findByConcursoIdAndEstadoFinal($this->getId(), 10);

        $arr = array();
        foreach ($fechas as $fecha) {
            $arr[] = $fecha->date;
        }

        return $arr;
    }

    public function quitarDestacadoConcursoYContribuciones() {
        $this->destacado = 0;
        $this->save();

        Doctrine::getTable('ConcursosDestacadosTemporales')->createQuery()->where('concurso_id=' . $this->getId())->delete()->execute();

        foreach ($this->getContribuciones() as $contribucion) {
            $contribucion->destacado = 0;
            $contribucion->save();
        }
    }

    public function getNumeroVotantes() {
        // Número de colaboradores que han votado en un concurso (al menos han asignado un punto en alguna contribución)
        return doctrine::getTable('ConcursoReferendum')->createQuery()
                        ->select('COUNT(DISTINCT user_id)')
                        ->where('concurso_id=' . $this->getId())
                        ->execute(null, DOCTRINE::HYDRATE_SINGLE_SCALAR);
    }

    public function setSlug() {
        $slug = functions::toSlug($this->getName());
        return $this->_set('slug', $slug);
    }

    public function getCheckStates($states_id) {
        $states_name = Doctrine_Query::create()
                ->select('s.name')
                ->from('States s')
                ->where('id=?', $states_id)
                ->fetchOne();
        return $states_name['name'];
    }

    public function getCheckCity($city_id) {
        $city_name = Doctrine::getTable('City')->find($city_id);
        return $city_name;
    }

    public function getCheckTipo($road_type_id) {
        $tipo_name = Doctrine_Query::create()
                ->select('r.name')
                ->from('RoadType r')
                ->where('id=?', $road_type_id)
                ->fetchOne();
        return $tipo_name['name'];
    }

    public function getUniqueSlug($slug) {
        $num_empresa_lista_blanca = Doctrine::getTable('Empresa')
                ->createQuery('p')
                ->where('slug = ?', $slug)
                ->count();
        return $num_empresa_lista_blanca;
    }

}
