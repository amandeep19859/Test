<?php

/**
 * ConcursoReferendum
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ConcursoReferendum extends BaseConcursoReferendum {

    /**
     * Devuelve los usuarios que te han votado (referendum->getSfGuardUser())
     */
    public function getQuienTeHaVotado() {
        $user = array();
        if ($referendum = Doctrine::getTable('ConcursoReferendum')
                ->createQuery('r')
                ->leftJoin('r.Contribucion c')
                ->Where('c.user_id=?', $this->getContribucion()->getUserId())
                ->andWhere('c.concurso_id=?', $this->getConcursoId())
                ->groupBy('r.user_id')
                ->execute()) {
            foreach ($referendum as $r)
                $user[] = $r->getSfGuardUser();
        }

        return $user;
    }

    public function save(\Doctrine_Connection $conn = null) {
        $tmp = Doctrine::getTable('ConcursoReferendum')->createQuery()
            ->Where('user_id=?', $this->getUserId())
            ->andWhere('contribucion_id=?', $this->getContribucionId())
            ->count();
        if ($tmp > 1)
        {
            throw new Exception('El usuario intenta votar más de una vez la contribucion');
        }

        $votos_anteriores = Doctrine::getTable('ConcursoReferendum')->createQuery()
            ->select('value')
            ->Where('user_id=?', $this->getUserId())
            ->andWhere('concurso_id=?', $this->getConcursoId())
            ->setHydrationMode(DOCTRINE::HYDRATE_SINGLE_SCALAR)
            ->execute();
        if(!is_array($votos_anteriores))
        {
            $votos_anteriores = array($votos_anteriores);
        }

        if (count($votos_anteriores)<5 and !in_array($this->getValue(), $votos_anteriores))
        {
            // No podemos votar más de 5 veces el mismo concurso,
            // no puede votar 2 veces la misma contribucion ni repetir una puntuación.
            parent::save($conn);
        }
        else
        {
            throw new Exception('Intento de fraude en votación: Repite puntuación o intenta votar más de 5 veces');
        }
    }
}
