<?php

/**
 * Contribucion
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Contribucion extends BaseContribucion {

    const CONTRIBUTION_STATUS_MAGAZINE = 'Revista';
    const CONTRIBUTION_STATUS_ACTIVE = 'Activa';
    const CONTRIBUTION_STATUS_DRAFT = 'Borrador';

    public function ownsToUser() {
        return (sfContext::getInstance()->getUser()->isAuthenticated() and $this->getUserId() == sfContext::getInstance()->getUser()->getGuardUser()->getId());
    }

    public function getUsername() {
        return $this->getUser()->getUsername();
    }

    public function getTipoConcurso() {
        return ContribucionTable::$tipos_concursos[$this->getConcurso()->getConcursoTipoId()];
    }

    public function getTiposConcurso() {
        return ContribucionTable::$tipos_concursos;
    }

    /* public function getConcursoTipoId()
      {
      return ContribucionTable::$tipos_concursos[$this->getConcurso()->getConcursoTipoId()];
      } */

    public function getVotosTotales() {
        $votos = Doctrine::getTable("ConcursoReferendum")->createQuery()->where("contribucion_id=?", $this->id)->count();
        return $votos;
    }

    public function getPuntuacionAsignable() {
        $puntuacion = Doctrine::getTable("ConcursoReferendum")
                ->createQuery()
                ->select('DISTINCT value')
                ->where('concurso_id=' . $this->getConcurso()->getId())
                ->andWhere('user_id=' . sfContext::getInstance()->getUser()->getGuardUser()->getId())
                ->setHydrationMode(Doctrine::HYDRATE_SINGLE_SCALAR)
                ->execute();

        if (!is_array($puntuacion)) {
            $puntuacion = array($puntuacion);
        }

        $asignables = array_diff(range(1, 5), $puntuacion);
        return empty($asignables) ? array() : array_combine($asignables, $asignables);
    }

    public function getPuntosTotales() {
        $value = 0;
        foreach ($this->ConcursoReferendum as $voto) {
            $value+=$voto->getValue();
        }
        return $value;
    }

    public function getArchivos() {
        return Doctrine::getTable('ContribucionArchivo')->createQuery()->where('contribucion_id=?', $this->getId())->andWhere('file!="null"')->execute();
    }

    public function getResumeName() {
        $str = $this->getName();
        /* $len = strlen($str);
          $str = substr($str,0,30);

          if($len>30)
          $str = $str.'...'; */

        return $str;
    }

    public function getResumeConcurso() {
        $str = $this->getConcurso()->getName();
        /* $len = strlen($str);
          $str = substr($str,0,30);

          if($len>30)
          $str = $str.'...'; */
        return $str;
    }

    public function getFilesNames() {
        $names = array();
        if ($files = doctrine::getTable('ContribucionArchivo')->findBy('contribucion_id', $this->getId())) {
            foreach ($files as $f) {
                $names[] = $f->getFile();
            }
        }
        return $names;
    }

    public function getConcursoCreatedAt() {
        return $this->getConcurso()->getDateTimeObject('created_at')->format('d-m-Y H:i');
    }

    public function getConcursoEstado() {
        //return $this->getConcurso()->getConcursoEstado();
        return $this->getContribucionEstado();
    }

    public function getConcursoCategoria() {
        return $this->getConcurso()->getConcursoCategoria();
    }

    public function getConcursoEmpresa() {
        return $this->getConcurso()->getEmpresa();
    }

    public function getConcursoActividad() {
        if (!$this->getConcurso()->getEmpresa()->getEmpresaSectorTresId())
            return $this->getConcurso()->getEmpresa()->getEmpresaSectorDos();
        else
            return $this->getConcurso()->getEmpresa()->getEmpresaSectorTres();
    }

    public function getConcursoActividads() {
        return $this->getConcurso()->getEmpresa()->getEmpresaSectorTres();
    }

    public function getConcursoSector() {
        return $this->getConcurso()->getEmpresa()->getEmpresaSectorUno();
    }

    public function getConcursoSubsector() {
        return $this->getConcurso()->getEmpresa()->getEmpresaSectorDos();
    }

    public function getConcursoProducto() {
        return $this->getConcurso()->getProducto()->getName();
    }

    public function getConcursoProductoMarca() {
        return $this->getConcurso()->getProducto()->getMarca();
    }

    public function getConcursoProductoTipo() {
        if (!$this->getConcurso()->getProducto()->getProductoTipoTresID())
            return $this->getConcurso()->getProducto()->getProductoTipoDos();
        else
            return $this->getConcurso()->getProducto()->getProductoTipoTres();
    }

    public function getConcursoProdTipo() {
        return $this->getConcurso()->getProducto()->getProductoTipoTres();
    }

    public function getConcursoProductoUno() {
        return $this->getConcurso()->getProducto()->getProductoTipoUno();
    }

    public function getConcursoProductoDos() {
        return $this->getConcurso()->getProducto()->getProductoTipoDos();
    }

    public function save(Doctrine_Connection $conn = null) {

        if ($conn === null) {
            $conn = $this->getTable()->getConnection();
        }

        if ($this->isNew()) {

            $previous = Doctrine_Query::create()
                    ->select('MAX(numero)')
                    ->from('Contribucion')
                    ->where('concurso_id=?', $this->getConcurso()->getId())
                    ->setHydrationMode(Doctrine::HYDRATE_SINGLE_SCALAR)
                    ->execute();

            if (is_null($previous)) {
                $previous = 0;
            }
            $this->setNumero($previous + 1);
        }

        parent::save($conn);
    }

    public function getSiguienteNumeroContribucion() {
        
    }

    public function getEmpresaCity() {
        return $this->getConcurso()->getCity();
    }

    public function getEmpresaState() {
        return $this->getConcurso()->getStates();
    }

    public function getEmpresaRoadType() {
        return $this->getConcurso()->getEmpresa()->getRoadType();
    }

    public function getConcursoProductoModelo() {
        return $this->getConcurso()->getProducto()->getModelo();
    }

    public function setSlug() {
        $slug = functions::toSlug($this->getName());
        return $this->_set('slug', $slug);
    }

    public function getCpMunicipioProvinciaPlanState() {
        //si no hay localidad (caso solo para "toda espaÃ±a") devuelve la provincia.
        $html = '';

        if (!$this->getConcurso()->getCityId()) {
            $html .= $this->getConcurso()->getStates();

            return $html;
        }

        if ($this->getConcurso()->getCity()->getIsCapital()) {
            $html .= $this->getConcurso()->getCity();

            return $html;
        } else {
            $html .= $this->getConcurso()->getCity() . ' (';
            $html .= $this->getConcurso()->getStates() . ')';
            return $html;
        }

        return $this->getLocalidad();
    }

    public function ArchivosSubidos() {
        return $query = Doctrine::getTable("ContribucionArchivo")->createQuery()->where("contribucion_id=$this->id")->execute();
    }

}
