<?php

/**
 * Empresa
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Empresa extends BaseEmpresa {

    const COMBINADO_NULO = 0;
    const COMBINADO_PROVINCIA = 1;
    const COMBINADO_LOCALIDAD = 2;

    /**
     * Devuelve el sector de 3r nivel o bien el de 2n nivel al que corresponde la empresa
     *
     * @return String
     */
//    public function getSector()
//    {
//        return $this->getEmpresaSectorTres()->getId() ? $this->getEmpresaSectorTres() : $this->getEmpresaSectorDos();
//    }

    public function getStatesName() {
        return $this->States ? $this->States->name : '';
    }

    /**
     * get sector name
     * @return type 
     */
    public function getSectorName() {
        return $this->getSector();
    }

    /**
     * get sub sector name
     * @return type 
     */
    public function getSubsectorName() {
        return $this->getSubSector();
    }

    /**
     * get localidad name
     * @return type 
     */
    public function getLocalidadName() {
        return $this->getLocalidad();
    }

    /**
     * Get Created at with format
     * @param type $format 
     */
    public function getFCreatedAt($format = 'D, d M Y H:i:s') {
        echo date($format, strtotime($this->getCreatedAt()));
    }

    /**
     * Get Unique audit of user
     * @param type $format 
     */
    public function getUniqueAudita() {
        return $num_empresa_audit = Doctrine::getTable('ListaCuestionarioUser')->createQuery()
                ->select('COUNT(DISTINCT user_id)')
                ->where('empresa_id = ?', $this->getId())
                ->andwhere('aprobado = ?', (bool) true)
                ->execute(null, DOCTRINE::HYDRATE_SINGLE_SCALAR);
    }

    public function getSectorNew() {
        return $this->getEmpresaSectorUno();
    }

    public function getSubSectorNew() {
        return $this->getEmpresaSectorDos();
    }

    public function getTresSectorNew() {
        return $this->getEmpresaSectorTres();
    }

    public function getSector() {
        return ($this->getEmpresaSectorUno() && $this->getEmpresaSectorUno()->getId()) ? $this->getEmpresaSectorUno() : $this->getEmpresaSectorDos();
    }

    public function getSubSector() {
        return ($this->getEmpresaSectorDos() && $this->getEmpresaSectorDos()->getId()) ? $this->getEmpresaSectorDos() : $this->getEmpresaSectorTres();
    }

    public function getTresSector() {
        //return $this->getEmpresaSectorTres();
        return ($this->getEmpresaSectorTres() && $this->getEmpresaSectorTres()->getId()) ? $this->getEmpresaSectorTres() : $this->getEmpresaSectorDos();
    }

    public function getTresSectors() {
        //return $this->getEmpresaSectorTres();
        return ($this->getEmpresaSectorTres() && $this->getEmpresaSectorTres()->getId()) ? $this->getEmpresaSectorTres() : '';
    }

    public function getSectorId() {
        return ($this->getEmpresaSectorTres() && $this->getEmpresaSectorTres()->getId()) ? $this->getEmpresaSectorTres()->getId() : $this->getEmpresaSectorDos()->getId();
    }

    /**
     * Devuelve true si la empresa tiene actividad. Por el contrario, si solo tiene subsector devuelve false.
     * @return bool
     */
    public function hasActividad() {
        return $this->getEmpresaSectorTres()->getId() ? true : false;
    }

    /**
     * Devuelve la dirección completa (calle + piso + puerta)
     *
     * @return string
     */
    public function getDireccionCompleta() {
        $dir = $this->getRoadType() . ' ' . $this->getDireccion();

        if ($this->getNumero()) {
            $dir .= ', ' . $this->getNumero();
        }

        if ($this->getPiso() != '')
            $dir .= '. Piso: ' . $this->getPiso();
        if ($this->getPuerta() != '')
            $dir .= ', Puerta: ' . $this->getPuerta();

        return trim($dir);
    }

    public function getDireccionForUrl() {
        $dir = $this->getDireccion();
        $num = $this->getNumero() ? '-' . $this->getNumero() : '';

        return urlencode($dir . $num);
    }

    public function getCpMunicipioProvincia() {
        //si no hay localidad (caso solo para "toda españa") devuelve la provincia.
        $html = '';

        if (null != $this->getCodigopostal()) {
            $html .= $this->getCodigopostal() . ' ';
        }

        if ($this->getLocalidad()->getIsCapital()) {
            $html .= $this->getLocalidad();

            return $html;
        } else {
            $html .= $this->getLocalidad() . ' (';
            $html .= $this->getStates() . ')';
            return $html;
        }

        return $this->getLocalidad();
    }

    public function getCpMunicipioProvinciaPlan() {
        //si no hay localidad (caso solo para "toda españa") devuelve la provincia.
        $html = '';

        if (!$this->getLocalidadId()) {
            $html .= $this->getStates();

            return $html;
        }

        if ($this->getLocalidad()->getIsCapital()) {
            $html .= $this->getLocalidad();

            return $html;
        } else {
            $html .= $this->getLocalidad();
            $html .= $this->getStateValuePlan();
            return $html;
        }

        return $this->getLocalidad();
    }

    public function getCpMunicipioProvinciaCongi() {
        //si no hay localidad (caso solo para "toda españa") devuelve la provincia.
        $html = '';

        /*   if (null != $this->getCodigopostal()) {
          $html .= $this->getCodigopostal() . ' ';
          } */
        if (!$this->getLocalidadId()) {
            $html .= $this->getStates();

            return $html;
        }


        if ($this->getLocalidad()->getIsCapital()) {
            $html .= $this->getLocalidad();

            return $html;
        } else {
            $html .= $this->getLocalidad() . ' (';
            $html .= $this->getStates() . ')';
            return $html;
        }

        return $this->getLocalidad();
    }

    /**
     * Devuelve el municipio y provincia. Si la localidad es capital, solo devuelve el municipio.
     *
     * @return string|City
     */
    public function getMunicipioProvincia($codigoPostal = false) {
        //si no hay localidad (caso solo para "toda españa") devuelve la provincia.

        if ($this->getLocalidad()->getIsCapital()) {
            $html = $this->getLocalidad();

            return $html;
        } else {
            //  $html = $this->getLocalidad() . ' (';
            $html = $this->getLocalidad();
            if ($codigoPostal) {
                $html .= $this->getCodigopostal() == '' ? '' : $this->getCodigopostal() . ' - ';
            }
            //$html .= $this->getStates() . ')';
            return $html;
        }

        return $this->getLocalidad();
    }

    public function getStateValue() {
        if ($this->getStatesId() == 1) { // Opción TODAS
            return 'Toda España';
        } else {
            $city = $this->getLocalidad();
            if (is_object($city)) {
                $CityandState = '';
                if (NULL == $city->getName() || $city->getId() == 1) { // Opción TODAS
                    $CityandState = 'Provincia de ' . $this->getStates()->getName();
                } else {
                    if (1 != $this->getLocalidad()->getIsCapital()) {
                        $CityandState .= ' (' . $city->getStates()->getName() . ')';
                    }
                }
                return $CityandState;
            }
        }
    }

    public function getStateValuePlan() {
        $city = $this->getLocalidad();
        $CityandState = '';
        if (1 != $this->getLocalidad()->getIsCapital()) {
            $CityandState .= ' (' . $city->getStates()->getName() . ')';
        }
        return $CityandState;
    }

    public function getCityValue() {
        return $this->getLocalidad();
    }

    /* public function getEmpresaDetailProvincia() {
      $q = Doctrine::getTable('States')->createQuery()
      ->select('name')
      ->where('id = ?', $this->getStatesId())
      ->execute(null, DOCTRINE::HYDRATE_SINGLE_SCALAR);
      return $q;
      } */

    public function getDireccionConProvincia() {
        return $this->getDireccionCompleta() . ' ' . $this->getMunicipioProvincia();
    }

    public function getNameForBreadcrumb($separator = ' >> ') {
        $breadCrumb = $this->getName() . $separator . $this->getLocalidad();
        if ($this->getStatesId() != 1) {
            $breadCrumb .= $separator . $this->getRoadType() . ' ' . $this->getDireccion() . ' ' . $this->getNumero();
        }

        return $breadCrumb;
    }

    /**
     * Devuelve el número de auditorías únicas realizadas.
     *
     */
    public function countAuditoriasRealizadas() {
        return $this->getDivisor();
    }

    public function getLastComentarios($limit = 0, $order = 'ASC') {
        $q = $this->getLastComentariosQuery($limit);
        $q->orderBy('r.id ' . $order);
        return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY_SHALLOW);
    }

    public function getLastComentariosQuery($limit = 0) {
        $q = Doctrine_Query::create()
                ->addFrom('ListaCuestionarioRespuesta r')
                ->select('r.id, r.respuesta, r.updated_at, c.id, u.username')
                ->leftJoin('r.Pregunta p')
                ->addWhere('p.tipo = ?', 'texto')
                ->addWhere('r.respuesta != ""')
                ->leftJoin('r.ListaCuestionarioUser c')
                ->andWhere('c.aprobado = 1')
                ->andWhere('c.empresa_id = ?', $this->getId())
                ->leftJoin('c.User u')
                ->limit($limit);
        return $q;
    }

    /**
     * Añade una nueva auditoria y recalcula el factor de fórmula
     */
    public function addAuditoria(ListaCuestionarioUser $cuestionario) {
        $this->setDividendo($this->dividendo + $cuestionario->getPuntos());
        $this->setDivisor($this->getDivisor() + 1);
        $this->save();

        //save the kpi associated.
        $cuestionario->saveKpis('empresa');
    }

    public function removeAuditoria(ListaCuestionarioUser $cuestionario) {
        $this->setDividendo($this->dividendo - $cuestionario->getPuntos());
        $this->setDivisor($this->getDivisor() - 1);
        $this->save();

        $cuestionario->substractKpis('empresa');
    }

    public function getFactorFormula() {
        if ($this->getDivisor() == 0)
            return 1;

        return floor($this->getDividendo() / $this->getDivisor());
    }

    /*
     * Devuelve la medalla correspondiente.
     */

    public function getMedalla() {
        $medalla = CategoriaExcelenciaTable::getMedalla($this->getFactorFormula());

        return strtolower($medalla);
    }

    public function getValidado() {
        if ($this->getValida() == 0)
            return 'NO';
        else
            return 'SI';
    }

    /**
     * Devuelve la evolución de la empresa al largo del año.
     */
    public function getEvolucionAsString() {
        $evolucion = EmpresaProductoEvolucionTable::getEvolucionEmpresaAnual($this->getId());
        if ($evolucion) {
            $valores = array_map(function ($value) {
                        $punt = $value['q_puntuacion'];
                        if ($punt > 51 && $punt <= 60) {
                            return 4;
                        } elseif ($punt > 40) {
                            return 3;
                        } elseif ($punt > 32) {
                            return 2;
                        } else {
                            return 1;
                        }
                    }, $evolucion);

            return implode(',', $valores);
        }

        return false;
    }

    public function isDestacada() {
        $values = array();
        if ($this->isDestacadaPorSector())
            $values[] = 'A';
        if ($this->isDestacadaPorProvincia())
            $values[] = 'P';
        if ($this->isDestacadaPorLocalidad())
            $values[] = 'L';
        if ($this->isDestacadaPorSectorProvincia())
            $values[] = 'AP';
        if ($this->isDestacadaPorSectorLocalidad())
            $values[] = 'AL';

        return implode(',', $values);
    }

    public function isDestacadaPorLocalidad() {
        return EmpresaDestacadaTable::getInstance()->existByIdAndLocalidad($this->getId()) ? true : false;
    }

    public function isDestacadaPorSector() {
        return EmpresaDestacadaTable::getInstance()->existById($this->getId()) ? true : false;
    }

    public function isDestacadaPorSectorProvincia() {
        return EmpresaDestacadaTable::getInstance()->existBySectorAndProvincia($this->getId()) ? true : false;
    }

    public function isDestacadaPorSectorLocalidad() {
        return EmpresaDestacadaTable::getInstance()->existBySectorAndLocalidad($this->getId()) ? true : false;
    }

    public function isDestacadaPorProvincia() {
        return EmpresaDestacadaTable::getInstance()->existByIdAndProvincia($this->getId()) ? true : false;
    }

    public function getLastComentariosListaNegra($limit = 0, $aprobado = true, $hydrate_array = false, $order = 'ASC') {
        $q = Doctrine_Query::create()->from('ComentarioListaNegra r')
                ->select('r.id, r.comentario, r.updated_at, u.username')
                ->leftJoin('r.User u')
                ->where('r.empresa_id = ?', $this->getId())
                ->andWhere('r.aprobado = ?', $aprobado ? 1 : 0)
                ->limit($limit)
                ->orderBy('r.id ' . $order);

        if ($hydrate_array) {
            return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY_SHALLOW);
        } else {

            return $q->execute();
        }
    }

    public function getDestacadosPorSector() {
        return EmpresaDestacadaTable::getInstance()->getEmpresaSector($this);
    }

    public function getDestacadosPorProvincia() {
        return EmpresaDestacadaTable::getInstance()->getEmpresaProvincia($this->getStatesId());
    }

    public function getDestacadosPorLocalidad() {
        return EmpresaDestacadaTable::getInstance()->getEmpresaLocalidad($this->getLocalidadId());
    }

    public function getDestacadosPorSectorAndProvincia() {
        return EmpresaDestacadaTable::getInstance()->getEmpresaSectorAndProvincia($this);
    }

    public function getDestacadosPorSectorAndLocalidad() {
        return EmpresaDestacadaTable::getInstance()->getEmpresaSectorAndLocalidad($this);
    }

    /**
     * fetch comment records for given product and user
     * @param String $user_id User Id
     * @return Reocrds
     */
    public function getCountComments($user_id) {
        //create comment query
        $comment_query = Doctrine_Query::create()
                ->select('COUNT(DISTINCT id)')
                ->from('ComentarioListaNegra cln')
                ->andWhere('cln.empresa_id =?', $this->getId())
                ->andWhere('cln.aprobado =1')
                ->orderby('cln.created_at DESC')
                ->execute(null, DOCTRINE::HYDRATE_SINGLE_SCALAR);
        //retrun audit query
        return $comment_query;
    }

    public function getCuestionarios($aprobado = true, $order = 'ASC') {
        $q = Doctrine_Query::create()->from('ListaCuestionarioUser q')
                ->where('q.empresa_id = ?', $this->getId())
                ->andwhere('q.aprobado = ?', (bool) $aprobado)
                ->orderBy('q.id ' . $order);
        return $q->execute();
    }

    public function save(Doctrine_Connection $conn = null) {
        if ($this->getStates() == 'Toda España') {
            $this->setLocalidadId(1);
        }
        parent::save($conn);
    }

    public function setSlug() {
        $slug = functions::toSlug($this->getName() . ' ' . $this->getLocalidadName() . ' ' . $this->getRoadType() . ' ' . $this->getDireccion() . ' ' . $this->getNumero());
        return $this->_set('slug', $slug);
    }

}
