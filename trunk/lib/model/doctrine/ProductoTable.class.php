<?php

/**
 * ProductoTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ProductoTable extends Doctrine_Table {

    /**
     * Join as Sectore and sub sector
     * @param type $query
     * @return type
     */
    public static function doSelectJoinSector($query) {
        $rootAlias = $query->getRootAlias();
        $query = $query->select($rootAlias . '.*, psu.name')->leftJoin($rootAlias . '.ProductoTipoUno psu');
        $query->select($rootAlias . '.*, psd.name')->leftJoin($rootAlias . '.ProductoTipoDos psd');
        return $query->select($rootAlias . '.*, pst.name')->leftJoin($rootAlias . '.ProductoTipoTres pst');
    }

    /**
     * Returns an instance of this class.
     *
     * @return object ProductoTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Producto');
    }

    public function findProductoByName($q) {
        //return parent::findBy('name',$q);
        return $this->createQuery()->where('name LIKE ?', '%' . $q . '%')->execute();
    }

    public function getListaQuery($lista = 'lb', $sector1 = false, $sector2 = false, $sector3 = false, Doctrine_Collection $productosDestacados = null) {
        $q = $this->createQuery('q')->where('q.lista = ?', $lista);
        $q->leftJoin('q.ProductoTipoUno s1');
        $q->leftJoin('q.ProductoTipoDos s2');
        $q->leftJoin('q.ProductoTipoTres s3');

        if ($sector1 && is_string($sector1)) {
            $q->andWhere('s1.slug = ?', $sector1);
        }
        if ($sector2 && is_string($sector2)) {
            $q->andWhere('s2.slug = ?', $sector2)->addOrderBy('s2.slug', 'ASC');
        }
        if ($sector3 && is_string($sector3)) {
            $q->andWhere('s3.slug = ?', $sector3)->addOrderBy('s3.slug', 'ASC');
        }

        if (!is_null($productosDestacados)) {
            $ids = array();
            foreach ($productosDestacados as $producto) {
                $ids[] = $producto->getId();
            }
            $q->andWhereNotIn('q.id', $ids);
        }
        $q->addOrderBy("q.name");
        return $q;
    }

    /**
     * Devuelve la lista de productos en la lista blanca.
     * @static
     *
     */
    public function getListaBlancaQuery($sector1 = false, $sector2 = false, $sector3 = false, Doctrine_Collection $productosDestacados = null) {
        return $this->getListaQuery('lb', $sector1, $sector2, $sector3, $productosDestacados);
    }

    public function getListaNegraQuery($sector1 = false, $sector2 = false, $sector3 = false) {
        return $this->getListaQuery('ln', $sector1, $sector2, $sector3);
    }

    public function getListaBlancaDestacados(array $options) {
        $q = $this->createQuery('p')
                ->innerJoin('p.ProductoDestacado pd')
                ->orderBy('pd.rank ASC');
        $combinado = false;
        if (!empty($options['name'])) {

            $filterName = false;
            $q->where('pd.name LIKE ?', '%' . $options['name'] . '%');
            $q->leftJoin('pd.ProductoTipoTres s3');
            $q->leftJoin('pd.ProductoTipoDos s2');

            if (!empty($options['sector3'])) {
                $q->andWhere('s3.slug = ?', $options['sector3']);
                $filterName = true;
            } elseif (!empty($options['sector2'])) {
                $q->andWhere('s2.slug = ?', $options['sector2']);
                $filterName = true;
            } elseif (!empty($options['sector1'])) {
                return new Doctrine_Collection('ProductoDestacado');
            }

            // this is to check if product name is highlighted or not ****************
            $q2 = $this->createQuery('p')
                    ->innerJoin('p.ProductoDestacado pd')
                    ->leftJoin('pd.ProductoTipoTres s3')
                    ->leftJoin('pd.ProductoTipoDos s2')
                    ->orderBy('pd.rank ASC')
                    ->where('pd.name LIKE ?', '%' . $options['name'] . '%');
            if ($filterName) {
                $q2->andWhere('pd.combinado = ?', Producto::COMBINADO_MARCA);
            } else {
                $q2->andWhere('pd.combinado = ?', Producto::COMBINADO_NULO);
            }
            $res1 = $q2->execute();

            // this is to check if marca name is highlighted or not ******************
            $q3 = $this->createQuery('p')
                    ->innerJoin('p.ProductoDestacado pd')
                    ->leftJoin('pd.ProductoTipoTres s3')
                    ->leftJoin('pd.ProductoTipoDos s2')
                    ->orderBy('pd.rank ASC')
                    ->where('pd.marca = ?', $options['marca']);
            if ($filterName) {
                $q3->andWhere('pd.combinado = ?', Producto::COMBINADO_MARCA);
            } else {
                $q3->andWhere('pd.combinado = ?', Producto::COMBINADO_NULO);
            }
            $res2 = $q3->execute();
            // **********************************************************************

            if (!empty($options['marca']) || !empty($options['modelo'])) {
                // check if both Product and marca are highlighted...
                if (count($res1) > 0 && count($res2) > 0) {
                    $q->orWhere('pd.marca = ?', $options['marca']);
                } else {
                    $q->andWhere('pd.marca = ?', $options['marca']);
                }

                if ($filterName) {
                    $q->andWhere('pd.combinado = ?', Producto::COMBINADO_MARCA);
                } else {
                    $q->andWhere('pd.combinado = ?', Producto::COMBINADO_NULO);
                }
                if (!empty($options['modelo'])) {
                    $q->andWhere('p.modelo = ?', $options['modelo']);
                }
            }

            if ($options['categoria_excelencia'] != null) {
                $values = $options['categoria_excelencia'];
                $medalla_var_min_values = array();
                $medalla_var_max_values = array();
                if ($values == 'ninguno') {
                    $values = 'Sin medalla';
                }
                $medalla_values = Doctrine::getTable('CategoriaExcelencia')->createQuery()
                        ->select('valor_min', 'valor_max')
                        ->Where('nombre=?', $values)
                        ->execute();
                foreach ($medalla_values as $data):
                    $medalla_var_min_values[$values] = $data->getValorMin();
                    $medalla_var_max_values[$values] = $data->getValorMax();
                endforeach;
                if ($values != null) {
                    $q->addWhere("(dividendo/divisor) > " . $medalla_var_min_values[$values] . " and (dividendo/divisor) < " . $medalla_var_max_values[$values]);
                }
            }
            //al buscar por nombre ordena alfabéticamente...
            //$q->orderBy('p.name ASC');
            return $q->execute();
        }


        if (!empty($options['sector3'])) {
            $q->leftJoin('pd.ProductoTipoTres s3')
                    ->andWhere('s3.slug = ?', $options['sector3']);
            $combinado = true;
        } elseif (!empty($options['sector2'])) {
            $q->leftJoin('pd.ProductoTipoDos s2')
                    ->andWhere('s2.slug = ?', $options['sector2']);
            $combinado = true;
        } elseif (!empty($options['sector1'])) {
            return new Doctrine_Collection('ProductoDestacado');
        }

        if ($options['categoria_excelencia'] != null) {
            $values = $options['categoria_excelencia'];
            $medalla_var_min_values = array();
            $medalla_var_max_values = array();
            if ($values == 'ninguno') {
                $values = 'Sin medalla';
            }
            $medalla_values = Doctrine::getTable('CategoriaExcelencia')->createQuery()
                    ->select('valor_min', 'valor_max')
                    ->Where('nombre=?', $values)
                    ->execute();
            foreach ($medalla_values as $data):
                $medalla_var_min_values[$values] = $data->getValorMin();
                $medalla_var_max_values[$values] = $data->getValorMax();
            endforeach;
            if ($values != null) {
                $q->addWhere("(dividendo/divisor) > " . $medalla_var_min_values[$values] . " and (dividendo/divisor) < " . $medalla_var_max_values[$values]);
            }
        }

        //si se busca por nombre, no se filtra en tabla destacados por nada más.
        //cas sector...
        if ($combinado) {
            if (!empty($options['sector1']) && empty($options['sector2'])) {
                return new Doctrine_Collection('ProductoDestacado');
            }
            if (!empty($options['marca']) || !empty($options['modelo'])) {
                $q->andWhere('pd.combinado = ?', Producto::COMBINADO_MARCA)
                        ->andWhere('pd.marca = ?', $options['marca']);
                if (!empty($options['modelo'])) {
                    $q->andWhere('pd.combinado = ?', Producto::COMBINADO_MODELO)
                            ->andWhere('p.modelo = ?', $options['modelo']);
                }
            } else {
                $q->andWhere('pd.combinado = ?', Producto::COMBINADO_NULO);
            }
            return $q->execute();
        }

        //si no se filtra por sector, filtramos por marca destacada
        if ($options['marca'] != '') {
            $q3 = $this->createQuery('p')
                    ->innerJoin('p.ProductoDestacado pd')
                    ->leftJoin('pd.ProductoTipoTres s3')
                    ->leftJoin('pd.ProductoTipoDos s2')
                    ->orderBy('pd.rank ASC')
                    ->where('pd.marca = ?', $options['marca'])
                    ->andWhere('pd.producto_tipo_tres_id is not null');
            $res2 = $q3->execute();
            if (count($res2) > 0) {
                $q->andWhere('pd.producto_tipo_tres_id is not null');
            }

            $q->andWhere('pd.marca = ?', $options['marca'])
                    ->andWhere('pd.combinado = ?', Producto::COMBINADO_NULO);

            if (!empty($options['modelo']) && $options['marca'] == '') {
                $q->andWhere('p.modelo = ?', $options['modelo'])
                        ->andWhere('pd.combinado = ?', Producto::COMBINADO_NULO);
            }
            return $q->execute();
        }

        return new Doctrine_Collection('ProductoDestacado');
    }

    public function getAutocomplete($value, $field, $limit = 10, $limit_to_list = false) {
        $q = $this->createQuery('q')
                ->select($field)
                ->where($field . ' LIKE ?', '%' . $value . '%')
                ->distinct(true);

        if (false !== $limit_to_list) {
            $q->andWhere('q.lista = ?', $limit_to_list);
        }
        $q->limit($limit);

        return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY_SHALLOW);
    }

    /**
     * fetch query object for audit made by given user
     * @param String $user_id User Id
     * @return Doctrine_Query
     */
    public function getAuditQuery($user_id) {
        //create audit query
        $audit_query = Doctrine_Query::create()
                ->select('DISTINCT (p.id), p.*')
                ->from('Producto p')
                ->leftJoin('p.CuestionarioRespuestas cr')
                ->where('cr.user_id =?', $user_id)
                ->orderby('cr.created_at DESC');
        //retrun audit query
        return $audit_query;
    }

    /**
     * fetch Audit records for given product and user
     * @param String $user_id User Id
     * @param String $product_id Product id
     * @return Reocrds
     */
    public function getUserAuditRecords($user_id, $product_id) {
        //create audit query
        $audit_query = Doctrine_Query::create()
                ->select('p.id, cr.id,cr.created_at created_date')
                ->from('ListaCuestionarioUser cr')
                ->leftJoin('cr.Producto p')
                ->where('cr.user_id =?', $user_id)
                ->andWhere('p.id =?', $product_id)
                ->orderby('cr.created_at DESC');
        ;
        //retrun audit query
        return $audit_query->fetchArray();
    }

    /**
     * fetch query for product favourit list for given user id
     * @param String $user_id User id
     * @return Doctrine_Query
     */
    public function getFavouritProduct($user_id) {
        //create prodcut favourit list query
        $product_favourit_list_query = Doctrine_Query::create()
                ->from('Producto p')
                ->leftJoin('p.ProductFavouriteList pfl')
                ->where('pfl.user_id =?', $user_id)
                ->orderby('pfl.created_at DESC');
        //return query
        return $product_favourit_list_query;
    }

    /**
     * fetch comment records for given user
     * @param String $user_id User Id
     * @return Reocrds
     */
    public function getCommentsQuery($user_id) {
        //create comment query
        $comment_query = Doctrine_Query::create()
                ->from('Producto p')
                ->leftJoin('p.ComentariosListaNegra cln')
                ->where('cln.sf_guard_user_id =?', $user_id)
                ->orderby('cln.created_at DESC');

        //retrun audit query
        return $comment_query;
    }

    /**
     * fetch comment records for given product and user
     * @param String $user_id User Id
     * @return Reocrds
     */
    public function getCommentsRecords($user_id, $product_id) {
        //create comment query
        $comment_query = Doctrine_Query::create()
                ->select('p.id,p.slug, cln.id,cln.created_at created_date')
                ->from('ComentarioListaNegra cln')
                ->leftJoin('cln.Producto p')
                ->where('cln.sf_guard_user_id =?', $user_id)
                ->andWhere('cln.producto_id =?', $product_id)
                ->orderby('cln.created_at DESC');

        //retrun audit query
        return $comment_query->fetchArray();
    }

    /**
     * fetch featured product by given contest type
     * for home page
     * @return Array
     */
    public function getFeatureProductRecords($list_type = 'lb') {
        //create featured product records query
        $featured_product_record_query = Doctrine_Query::create()
                ->from('Producto p')
                ->where('p.featured = 1')
                ->andWhere('p.lista =?', $list_type)
                ->orderBy('p.featured_order ASC, p.created_at DESC')
                ->limit(10);
        //fetch records
        $featured_product_record = $featured_product_record_query->execute();
        //return records
        return $featured_product_record;
    }

    /**
     * Fetch all product names
     * @return Array
     */
    public function getAllProductNames() {
        //create all product names query
        $all_product_names_query = Doctrine_Query::create()
                ->select('p.name')
                ->from('Producto p');
        $all_product_records = $all_product_names_query->fetchArray();
        //create product names array
        $product_names_array = array('' => '');
        //add each product names
        foreach ($all_product_records as $product_record) {
            $product_names_array[$product_record['name']] = $product_record['name'];
        }
        //return product names array
        return $product_names_array;
    }

    /**
     * Fetch all marca reocrds
     * @return Array
     */
    public function getMarcaRecords() {
        //create marca records query
        $marca_records_query = Doctrine_Query::create()
                ->select('p.marca')
                ->from('Producto p');
        $marca_records = $marca_records_query->fetchArray();
        //create marca array
        $marca_array = array('' => '');
        //add each marca names
        foreach ($marca_records as $marca_record) {
            $marca_array[$marca_record['marca']] = $marca_record['marca'];
        }
        //return marca names array
        return $marca_array;
    }

    /**
     * Fetch all modelo reocrds
     * @return Array
     */
    public function getModeloRecords() {
        //create modelo records query
        $modelo_records_query = Doctrine_Query::create()
                ->select('p.modelo')
                ->from('Producto p');
        $modelo_records = $modelo_records_query->fetchArray();
        //create modelo array
        $modelo_array = array('' => '');
        //add each modelo names
        foreach ($modelo_records as $modelo_record) {
            $modelo_array[$modelo_record['modelo']] = $modelo_record['modelo'];
        }
        //return modelo names array
        return $modelo_array;
    }

    /**
     * Fetch the product featured limit
     * It will help Admin to publish product on home page
     * if product featured limit is not more than 10
     * @param $list_type List Type
     * @return Array
     */
    public function getFeatreudLimit($list_type = 'lb') {
        //create product featured limit query
        $product_feature_limit_query = Doctrine_Query::create()
                ->select('COUNT(p.id) product_limit')
                ->from('Producto p')
                ->where('p.featured = 1')
                ->andWhere('p.lista =?', $list_type);
        //fetch limit
        return $product_feature_limit_query->fetchArray();
    }

}