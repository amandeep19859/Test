<?php

/**
 * ProfesionalLetterTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
sfProjectConfiguration::getActive()->loadHelpers('Date');

class ProfesionalLetterTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object ProfesionalLetterTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('ProfesionalLetter');
    }

    public static function doSelectJoinForListing($query) {
        return $query->select('r.*, p.*, plt.name, ptu.id, ptd.id, ptt.id, c.name, s.name, sf.username')
                        ->leftJoin('r.Profesional p')
                        ->leftJoin('r.ProfesionalLetterType plt')
                        ->leftJoin('p.ProfesionalTipoUno ptu')
                        ->leftJoin('p.ProfesionalTipoDos ptd')
                        ->leftJoin('p.ProfesionalTipoTres ptt')
                        ->leftJoin('r.User sf')
                        ->leftJoin('r.City c')->leftJoin('r.States s');
    }

    public function getAttachedRecomendation($id) {
        $result = Doctrine::getTable('Profesional')
                ->createQuery('p')
                ->leftJoin('p.ProfesionalLetter PL')
                ->where('p.id = ?', $id)
                ->andWhere('PL.is_first != 1')
                ->andWhere('PL.profesional_letter_estado_id = 2')
                ->fetchArray();
        return (isset($result[0])) ? count($result[0]['ProfesionalLetter']) : 0;
    }

    public function getLastInterval($profesionalId, $loginUser) {

        // Max 5 per day for different
        $perDay = Doctrine::getTable('ProfesionalLetter')
                ->createQuery('PL')
                ->select('PL.*, count(PL.id) as maxperday')
                ->andWhere('PL.user_id = ? ', $loginUser)
                ->andWhere('PL.created_at >= CURDATE()')
                ->andWhere('PL.user_id = ? AND is_first != 1', $loginUser)
                ->orderby('PL.id DESC')
                ->fetchArray();
        
        $perYear = Doctrine::getTable('ProfesionalLetter')
                    ->createQuery('PL')
                    ->select('count(PL.id) as minrec')
                    ->where('PL.profesional_id = ?', $profesionalId)
                    ->andWhere('PL.user_id = ? ', $loginUser)
                    ->andWhere('YEAR(CURDATE()) = YEAR(PL.created_at)')
                    ->andWhere('PL.profesional_letter_estado_id=2')
                    ->orderby('PL.id DESC')
                    ->fetchArray();
       
        if($perYear[0]['minrec']>=4){
            return array('type' => 'per_year', 'flag' => false);
        }
        
        if (empty($perDay) || $perDay[0]['maxperday'] <= 5) {
            // Max 4 per calander year for specific profesional
            $perYear = Doctrine::getTable('ProfesionalLetter')
                    ->createQuery('PL')
                    ->select('count(PL.id) as minrec')
                    ->where('PL.profesional_id = ?', $profesionalId)
                    ->andWhere('PL.user_id = ? ', $loginUser)
                    ->andWhere('YEAR(CURDATE()) = YEAR(PL.created_at)')
                    ->orderby('PL.id DESC')
                    ->fetchArray();

            if ($perYear[0]['minrec'] < 4) {
                // Check last interval time for specific profesional
                $interval = Doctrine::getTable('ProfesionalLetter')
                        ->createQuery('PL')
                        ->select('PL.*, DATEDIFF(CURDATE(), PL.created_at) as days, DATE_ADD(PL.created_at, INTERVAL 30 DAY) as interval_day')
                        ->where('PL.profesional_id = ?', $profesionalId)
                        ->andWhere('PL.user_id = ? ', $loginUser)
                        ->orderby('PL.id DESC')
                        ->fetchArray();

                if (empty($interval) || $interval[0]['days'] > 29) {
                    return array('type' => 'interval', 'flag' => true);
                } else {
                    return array('type' => 'interval', 'flag' => true);
                    //return array('type' => 'interval', 'flag' => false, 'option' => date('d/m', strtotime($interval[0]['interval_day'])));
                }
            } else {
                return array('type' => 'per_year', 'flag' => true);
            }
        } else {
            return array('type' => 'maxperday', 'flag' => true);
            //return array('type' => 'maxperday', 'flag' => false);
        }
    }

    public function getLatestIsFirst($profesionalId, $loginUser) {
        // Max 5 per day for different
        $perDay = Doctrine::getTable('ProfesionalLetter')
                ->createQuery('PL')
                ->select('PL.id')
                ->andWhere('PL.user_id = ? AND is_first != 1', $loginUser)
                ->andWhere('PL.profesional_id = ?', $profesionalId)
                ->orderby('PL.id DESC')
                ->fetchOne();

        return (count($perDay) > 0) ? $perDay['id'] : '';
    }

    public function getProfesionalChartData($profesionalId) {
        return Doctrine::getTable('ProfesionalLetter')
                        ->createQuery('PL')
                        ->select('PL.id, count(PL.profesional_letter_type_id) as total, (SUM(IF(PL.profesional_letter_type_id = 1 , 1, 0)) * 100 / count(PL.profesional_letter_type_id)) as reco,  (SUM(IF(PL.profesional_letter_type_id = 2, 1, 0)) * 100 / count(PL.profesional_letter_type_id)) as disp ')
                        ->where('PL.profesional_id = ?', $profesionalId)
                        ->andWhere('PL.profesional_letter_estado_id = 2')
                        ->orderby('PL.id DESC')
                        ->fetchArray();
    }

    public function makeAatioAlert($profesionalId) {
        $query = Doctrine::getTable('ProfesionalLetter')
                ->createQuery('PL')
                ->select('PL.*, (SUM(IF(PL.profesional_letter_type_id = 1 , 1, 0))) as reco, (SUM(IF(PL.profesional_letter_type_id = 2, 1, 0))) as disp, ((SUM(IF(PL.profesional_letter_type_id = 2, 1, 0))) * 100 / (SUM(IF(PL.profesional_letter_type_id = 1 , 1, 0)))) as disp_ratio ')
                ->where('PL.profesional_id = ?', $profesionalId)
                ->andWhere('PL.profesional_letter_estado_id IN (1,2)')
                ->orderby('PL.id DESC')
                ->fetchOne();

        if ($query->getDispRatio() > 25) {
            Alertas::generateRatioAlert($query);
        }
    }

    public function despAlert($profesionalId) {
        $query = Doctrine::getTable('ProfesionalLetter')
                ->createQuery('PL')
                ->select('PL.id, count(PL.profesional_letter_type_id) as total, (SUM(IF(PL.profesional_letter_type_id = 1 , 1, 0)) * 100 / count(PL.profesional_letter_type_id)) as reco,  (SUM(IF(PL.profesional_letter_type_id = 2, 1, 0)) * 100 / count(PL.profesional_letter_type_id)) as disp ')
                ->where('PL.profesional_id = ?', $profesionalId)
                ->andWhere('PL.profesional_letter_estado_id = 2')
                ->orderby('PL.id DESC')
                ->fetchOne();

        if ($query->getDisp() >= 25) {
            Alertas::despRatioAlert($query, $profesionalId);
        }
    }

    public function recAlert($profesionalId) {
        $query = Doctrine::getTable('ProfesionalLetter')
                ->createQuery('PL')
                ->where('PL.profesional_id = ?', $profesionalId)
                ->andWhere('PL.profesional_letter_estado_id = 2')
                ->orderby('PL.id DESC')
                ->fetchOne();

        Alertas::recRatioAlert($query, $profesionalId);
    }

    /**
     * fetch query object for draft contest created by given user
     * @param String $user_id User id
     * @param Array $contest_status_array Contest Status Array records
     * @return Doctrine_Query object
     */
    public function getDraftCartas($user_id, $profesional_status_array) {
        //create draft contest query

        $draft_query = Doctrine_Query::create()
                ->select('pl.*, pl.profesional_letter_type_id as letter_type_id, pl.id as letter_id')
                ->from('ProfesionalLetter pl')
                ->leftJoin('pl.ProfesionalLetterEstado pe')
                ->where('pl.user_id =?', $user_id)
                ->andWhereIn('pe.name', $profesional_status_array)
                //->andWhereIn('pe.name', $profesional_status_array)
                ->orderBy('pl.created_at DESC');
        
        /*$draft_query = Doctrine_Query::create()
                ->select('p.*, pl.*, pl.profesional_letter_type_id as letter_type_id, pl.id as letter_id')
                ->from('Profesional p')                
                ->leftJoin('p.ProfesionalLetter pl')
                ->leftJoin('pl.ProfesionalLetterEstado pe')
                ->where('pl.user_id =?', $user_id)
                ->andWhereIn('pe.name', $profesional_status_array)
                ->orderBy('pl.created_at DESC');*/
        //return draft contest query
        
        return $draft_query;
    }

    /**
     * Fetch recommendation letters
     * @param String $user_id User Id
     * @return Array
     */
    public function getRecommendedLetters($user_id) {
        //create recommended letter_query
        $recommended_letter_query = Doctrine_Query::create()
                ->select('pl.*, p.slug professional_slug')
                ->from('ProfesionalLetter pl')
                ->leftJoin('pl.Profesional p')
                ->leftJoin('pl.ProfesionalLetterEstado ple')
                ->where('pl.user_id =?', $user_id)
                ->andWhere('ple.name LIKE "%Activa%"')
                ->andWhere('pl.profesional_letter_type_id = 1');
        //return records
        return $recommended_letter_query->fetchArray();
    }

    /**
     * Fetch disapproval letters
     * @param String $user_id User Id
     * @return Array
     */
    public function getDisapprovalLetters($user_id) {
        //create recommended letter_query
        $recommended_letter_query = Doctrine_Query::create()
                ->select('pl.*, p.slug professional_slug')
                ->from('ProfesionalLetter pl')
                ->leftJoin('pl.Profesional p')
                ->where('pl.user_id =?', $user_id)
                ->andWhere('pl.profesional_letter_estado_id = 2')
                ->andWhere('pl.profesional_letter_type_id = 2');
        //return records
        return $recommended_letter_query->fetchArray();
    }

}