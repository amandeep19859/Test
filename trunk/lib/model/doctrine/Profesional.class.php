<?php

/**
 * Profesional
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
sfProjectConfiguration::getActive()->loadHelpers(array('Date', 'Url'));

class Profesional extends BaseProfesional {
  const COMBINADO_NULO = 0;
  const COMBINADO_PROVINCIA = 1;
  const COMBINADO_LOCALIDAD = 2;
  const PROFESIONAL_STATUS_DRAFT = 'Borrador';

  /**
   * Devuelve el tipo de 3r nivel o bien el de 2n nivel al que corresponde la profesional
   *
   * @return String
   */
  public function getTipo() {
    return $this->getProfesionalTipoTres()->getId() ? $this->getProfesionalTipoTres() : $this->getProfesionalTipoDos();
  }

  public function getTipoTres() {
    return $this->getProfesionalTipoTres()->getId() ? $this->getProfesionalTipoTres() : '';
  }

  public function getTipoId() {
    return $this->getProfesionalTipoTres()->getId() ? $this->getProfesionalTipoTres()->getId() : $this->getProfesionalTipoDos()->getId();
  }

  public function getFullName() {
    return $this->getFirstName();
  }

  public function setSlug() {
    $slug = functions::toSlug($this->getFirstName() . ' ' . $this->getLastNameOne() . ' ' . $this->getLastNameTwo() . ' ' . $this->getRoadType()->getName() . ' ' . $this->getAddress() . ' ' . $this->getNumero() . ' ' . $this->getStateName() . ' ' . $this->getCityName() . ' ' . time());
    return $this->_set('slug', $slug);
  }

  /**
   * Devuelve true si la profesional tiene actividad. Por el contrario, si solo tiene subsector devuelve false.
   * @return bool
   */
  public function hasActividad() {
    return $this->getProfesionalTipoTres()->getId() ? true : false;
  }

  public function getPEstado() {
    return $this->getProfesionalEstado()->getName();
  }

  /**
   * Devuelve la dirección completa (calle + piso + puerta)
   *
   * @return string
   */
  public function getDireccionCompleta() {
    $dir = $this->getRoadType() . ' ' . $this->getAddress() . ($this->getAddress() && $this->getNumero() ? ', ' : '') . $this->getNumero();
    return trim($dir);
  }

  public function getPisoAndPuerta() {
    $dir = '';
    if ($this->getPiso() != '')
      $dir = ', Piso: ' . $this->getPiso();
    if ($this->getPuerta() != '')
      $dir .= ', Puerta: ' . $this->getPuerta();

    return trim($dir);
  }

  /**
   * Devuelve la dirección completa (calle + piso + puerta)
   *
   * @return string
   */
  public function getDireccionCompletaAll() {
    $dir = $this->getRoadType() . ' ' . $this->getAddress();

    if ($this->getNumero()) {
      $dir .= ', ' . $this->getNumero();
    }

    if ($this->getPiso() != '')
      $dir .= '.' . ' Piso: ' . $this->getPiso();
    if ($this->getPiso() != '' && $this->getPuerta() != '')
      $dir .= ',';
    if ($this->getPuerta() != '')
      $dir .= ' Puerta: ' . $this->getPuerta();

    return trim($dir);
  }

  public function getTelephone() {
    $dir = '';
    if ($this->getTelefono() != '')
      $dir .= '. Teléfono: ' . $this->getTelefono();
    if ($this->getEmail() != '')
      $dir .= ' Email: ' . $this->getEmail();

    return trim($dir);
  }

  public function getTele() {
    $dir = '';
    if ($this->getTelefono() != '')
      $dir .= 'Teléfono: ' . $this->getTelefono();

    return trim($dir);
  }

  public function getEmailAddress() {
    $dir = '';
    if ($this->getEmail() != '')
      $dir .= 'Correo electrónico: ' . $this->getEmail();

    return trim($dir);
  }

  public function getDireccionForUrl() {
    $dir = $this->getDireccion();
    $num = $this->getNumero() ? '-' . $this->getNumero() : '';

    return urlencode($dir . $num);
  }

  public function getProfesionalLetterType($profesionalId) {
    return Doctrine::getTable('ProfesionalLetter')->findOneByProfesionalId($profesionalId);
  }

  /**
   * Devuelve el municipio y provincia. Si la localidad es capital, solo devuelve el municipio.
   *
   * @return string|City
   */
  public function getMunicipioProvincia() {
    //si no hay localidad (caso solo para "toda españa") devuelve la provincia.

    if ($this->getCity()->getIsCapital()) {
      return $this->getCity();
    } else {
      return $this->getCity() . ' (' . $this->getStates() . ')';
    }

    return $this->getCity();
  }

  public function getCityState() {
    //si no hay localidad (caso solo para "toda españa") devuelve la provincia.

    if ($this->getCity()->getIsCapital()) {
      return $this->getCity();
    } else {
      return $this->getCity() . ' (' . $this->getStates() . ')';
    }

    return $this->getCity();
  }

  public function getUsername() {
    return $this->getUser()->getUsername();
  }

  public function getDireccionConProvincia() {
    return $this->getDireccionCompleta() . ' ' . $this->getMunicipioProvincia();
  }

  public function getNameForBreadcrumb($separator = ' >> ') {
    //$breadCrumb = $this->getFirstName() .' '.$this->getLastNameOne().' '.$this->getLastNameTwo().', '.$this->getCity();
    $breadCrumb = $this->getFirstName() . ' ' . $this->getLastNameOne() . ' ' . $this->getLastNameTwo() . ', ' . $this->getMunicipioProvincia();
//         if ($this->getStatesId() != 1) {
//            $breadCrumb .= $separator . $this->getRoadType() . ' ' . $this->getAddress() . ' ' . $this->getNumero();
//         }

    return $breadCrumb;
  }

  /**
   * Devuelve el número de auditorías únicas realizadas.
   *
   */
  public function countAuditoriasRealizadas() {
    return $this->getDivisor();
  }

  public function getLastComentarios($limit = 0, $order = 'ASC') {
    $q = $this->getLastComentariosQuery($limit);
    $q->orderBy('r.id ', $order);
    return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY_SHALLOW);
  }

  public function getLastLetters($limit = 0, $order = 'ASC') {
    $q = $this->getLastLettersQuery($limit);
    $q->orderBy('p.id DESC');
    //$q->orderBy('p.is_first DESC');
    return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY_SHALLOW);
  }

  public function getLastLettersQuery($limit = 0) {
    $q = Doctrine_Query::create()
            ->addFrom('ProfesionalLetter p')
            ->addWhere('p.profesional_id = ?', $this->getId())
            ->andWhere('p.profesional_letter_type_id = ?', sfContext::getInstance()->getRequest()->getParameter('tipo'))
            ->andWhere('p.Profesional_letter_estado_id = 2')
            ->limit($limit);
    return $q;
  }

  public function getLetterUsername($user_id) {
    $user = Doctrine::getTable('sfGuardUser')->findOneBy('id', $user_id);
    return $user->username;
  }

  public function getComentariosAll($profesionalId) {
    return Doctrine::getTable('ProfesionalLetter')->findByProfesionalId($profesionalId);
  }

  public function getProfesionalRecommandLetterQuery($prof_id, $letter_type_id, $limit) {
    $q = Doctrine_Query::create()
            ->addFrom('ProfesionalLetter p')
            ->addWhere('p.profesional_id = ?', $prof_id)
            ->andWhere('p.profesional_letter_type_id = ?', $letter_type_id)
            ->andWhere('p.Profesional_letter_estado_id = 2')
            ->limit($limit);
    //echo $q->getSqlQuery();exit;
    return $q;
  }

  public function getProfesionalRecommandLetter($profesionalId) {
    $profesional_letter_type_id = '';
    if (sfContext::getInstance()->getRequest()->hasParameter('desaprobaciones')) {
      $profesional_letter_type_id = 2;
    } else {
      $profesional_letter_type_id = 1;
    }
    return Doctrine::getTable('ProfesionalLetter')->findByProfesionalIdAndProfesionalLetterTypeIdAndProfesionalLetterEstadoId($profesionalId, $profesional_letter_type_id, 2);
  }

  public function getFactorFormula() {
    if ($this->getDivisor() == 0)
      return 1;

    return floor($this->getDividendo() / $this->getDivisor());
  }

  public function getValidado() {
    if ($this->getValida() == 0)
      return 'NO';
    else
      return 'SI';
  }

  public function save(Doctrine_Connection $conn = null) {
    if ($this->getStates() == 'Toda España') {
      $this->setCityId(1);
    }
    parent::save($conn);
  }

  public static function addInformation($asValues, $id = '', $letter_id = '') {
    $snUserId = sfContext::getInstance()->getUser()->getGuardUser()->getId();

    if ($id != '') {
      $oProfesional = Doctrine::getTable('Profesional')->find($id);
    }
    else
      $oProfesional = new Profesional();

    $oProfesional->first_name = trim($asValues['first_name']);
    $oProfesional->last_name_one = trim($asValues['last_name_one']);
    $oProfesional->last_name_two = trim($asValues['last_name_two']);
    if (isset($asValues['borrador'])) {
      $oProfesional->profesional_estado_id = 9;
    } else {
      $oProfesional->profesional_estado_id = 1;
    }
    $oProfesional->profesional_tipo_uno_id = $asValues['profesional_tipo_uno_id'];
    $oProfesional->profesional_tipo_dos_id = $asValues['profesional_tipo_dos_id'];
    $oProfesional->profesional_tipo_tres_id = $asValues['profesional_tipo_tres_id'];
    if (!empty($asValues['road_type_id'])) {
      $oProfesional->road_type_id = $asValues['road_type_id'];
    } else {
      $oProfesional->road_type_id = NULL;
    }
    $oProfesional->address = trim($asValues['address']);
    $oProfesional->numero = trim($asValues['numero']);
    $oProfesional->piso = $asValues['piso'];
    $oProfesional->puerta = $asValues['puerta'];
    $oProfesional->telefono = $asValues['telefono'];
    $oProfesional->email = trim($asValues['email']);
    $oProfesional->states_id = $asValues['states_id'];
    $oProfesional->city_id = $asValues['city_id'];
    $oProfesional->user_id = $snUserId;
    $oProfesional->slug = '';
    $oProfesional->save();

    $snProfesionalId = $oProfesional->getId();

    if ($letter_id != '') {
      $oProfesionalLetter = Doctrine::getTable('ProfesionalLetter')->findOneById($letter_id);
      $oProfesionalLetter->profesional_letter_estado_id = 1;
      $oProfesionalLetter->save();
    } else {
      if ($id != '') {
        $oProfesionalLetter = Doctrine::getTable('ProfesionalLetter')->findOneByProfesionalId($id);
      }
      else
        $oProfesionalLetter = new ProfesionalLetter();

      $oProfesionalLetter->name = trim($asValues['first_name']);
      $oProfesionalLetter->description = $asValues['incidencia'];
      $oProfesionalLetter->plan_accion = '';
      $oProfesionalLetter->profesional_letter_type_id = 1;
      $oProfesionalLetter->profesional_activa_desa_id = 1;
      $oProfesionalLetter->profesional_apro_despro_id = 1;
      $oProfesionalLetter->profesional_letter_estado_id = 2;
      $oProfesionalLetter->is_first = 1;
      $oProfesionalLetter->profesional_id = $snProfesionalId;
      $oProfesionalLetter->states_id = $asValues['states_id'];
      $oProfesionalLetter->city_id = $asValues['city_id'];
      $oProfesionalLetter->user_id = $snUserId;
      $oProfesionalLetter->save();
    }

    if ($id == '')
      Alertas::saveNewProfesionalAlerts($snProfesionalId);

    return $snProfesionalId;
  }

  public static function addRecomendInformation($asValues, $snIdprofesional, $snLetterId = '') {
    $snStatesId = sfContext::getInstance()->getRequest()->getParameter('states_id');
    $snCityId = sfContext::getInstance()->getRequest()->getParameter('city_id');
    $snUserId = sfContext::getInstance()->getUser()->getGuardUser()->getId();
    $ssGuardUser = sfContext::getInstance()->getUser()->getGuardUser();

    if ($snLetterId)
      $oProfesionalLetter = Doctrine::getTable('ProfesionalLetter')->findOneById($snLetterId);
    else
      $oProfesionalLetter = new ProfesionalLetter();

    $oProfesionalLetter->name = trim($asValues['name']);
    $oProfesionalLetter->description = $asValues['incidencia'];
    $oProfesionalLetter->plan_accion = '';
    $oProfesionalLetter->profesional_letter_type_id = 1;
    $oProfesionalLetter->profesional_activa_desa_id = 1;
    $oProfesionalLetter->profesional_apro_despro_id = 1;
    if (isset($asValues['borrador'])) {
      $oProfesionalLetter->profesional_letter_estado_id = 9;
    } else {
      $oProfesionalLetter->profesional_letter_estado_id = 1;
    }

    $oProfesionalLetter->profesional_id = $snIdprofesional;
    $oProfesionalLetter->states_id = $snStatesId;
    $oProfesionalLetter->city_id = $snCityId;
    $oProfesionalLetter->user_id = $snUserId;
    $oProfesionalLetter->save();

    if (!$snLetterId) {
      //        AlertasTable::nueva(3, 'Recomendación', 'Se ha recomendado un professional');
      $ssUrl = url_for('/backend.php/profesionales/' . $snIdprofesional);
      AlertasTable::nueva(5, 'Recomendación', 'Se ha recomendado a un profesional');


      $profesionalData = Doctrine::getTable('Profesional')->findOneByUserId($snUserId);
      $profData = Doctrine::getTable('Profesional')->findOneById($snIdprofesional);
      //$ssProfFullName = $profesionalData->getFirstName() . ' ' . $profesionalData->getLastNameOne() . ' ' . $profesionalData->getLastNameTwo();
      $ssProfFullName = $profData->getFirstName() . ' ' . $profData->getLastNameOne() . ' ' . $profData->getLastNameTwo();


      $ssCity = self::compateCity($profesionalData);

      $ssApproval = 'Nueva recomendación de <strong> <a href="colaboradores/' . $snUserId . '/List_ver">' . ($ssGuardUser->getUsername()) . '</a> </strong> en el Directorio.';
      // $ssApproval = 'El profesional ' . $ssProfFullName . ' ha bajado su <a href=/backend.php/profesionales/' . $snIdprofesional . '><strong>rendimiento</strong>.</a>';
      AlertasTable::nueva(8, 'Recomendación', $ssApproval);
      /* $ssTipo = $profesionalData->getProfesionalTipoTres()->getId() ? $profesionalData->getProfesionalTipoTres() : $profesionalData->getProfesionalTipoDos();
        $ssRecommand = '<a href="cartas_pendientes/'.$oProfesionalLetter->getId().'">recomendado</a>';
        $ssDisApproval = ' <strong> <a href="profesionales/'.$profesionalData->getId().'">'.($ssProfFullName).'</a> </strong> ha '.$ssRecommand.' al profesional '.$ssProfFullName.' de la actividad ['.$ssTipo.'] en '.$ssCity;
        AlertasTable::nueva(9, 'recomendado', $ssDisApproval); */
    }
  }

  public static function addDisaprovalInformation($asValues, $savefilename, $snIdprofesional, $snLetterId = '') {

    $snStatesId = sfContext::getInstance()->getRequest()->getParameter('states_id');
    $snCityId = sfContext::getInstance()->getRequest()->getParameter('city_id');
    $snUserId = sfContext::getInstance()->getUser()->getGuardUser()->getId();
    $ssGuardUser = sfContext::getInstance()->getUser()->getGuardUser();

    if ($snLetterId)
      $oProfesionalLetter = Doctrine::getTable('ProfesionalLetter')->findOneById($snLetterId);
    else
      $oProfesionalLetter = new ProfesionalLetter();

    $oProfesionalLetter->name = trim($asValues['name']);
    $oProfesionalLetter->description = $asValues['incidencia'];
    $oProfesionalLetter->plan_accion = $asValues['plan_accion'];
    $oProfesionalLetter->profesional_letter_type_id = 2;
    $oProfesionalLetter->profesional_activa_desa_id = 1;
    $oProfesionalLetter->profesional_apro_despro_id = 1;
    if (isset($asValues['borrador'])) {
      $oProfesionalLetter->profesional_letter_estado_id = 9;
    } else {
      $oProfesionalLetter->profesional_letter_estado_id = 1;
    }
    $oProfesionalLetter->profesional_id = $snIdprofesional;
    $oProfesionalLetter->states_id = $snStatesId;
    $oProfesionalLetter->city_id = $snCityId;
    $oProfesionalLetter->user_id = $snUserId;
    $oProfesionalLetter->save();

    $delete_query = Doctrine_Query::create()
            ->delete()
            ->from('ProfesionalLetterArchivo pla')
            ->Where("pla.profesional_letter_id  = ".$oProfesionalLetter->getId());
    // execute delete query
    $delete_query->execute();

    foreach ($savefilename as $ssFiles) {
      $oProfesionalArchivo = new ProfesionalLetterArchivo();
      $oProfesionalArchivo->profesional_letter_id = $oProfesionalLetter->getId();
      $oProfesionalArchivo->setFile($ssFiles);
      $oProfesionalArchivo->save();
      unset($oProfesionalArchivo);
    }

    if (!$snLetterId) {
      $chartData = Doctrine::getTable('ProfesionalLetter')->getProfesionalChartData($snIdprofesional);
      $desa_data = round($chartData[0]['disp']);
      if ($desa_data >= 25) {
        AlertasTable::nueva(6, 'Desaprobación', 'Se ha desaprobado a un profesional');
      }
      $profesionalData = Doctrine::getTable('Profesional')->findOneByUserId($snUserId);
      $profData = Doctrine::getTable('Profesional')->findOneById($snIdprofesional);
      //$ssProfFullName = $profesionalData->getFirstName() . ' ' . $profesionalData->getLastNameOne() . ' ' . $profesionalData->getLastNameTwo();
      $ssProfFullName = $profData->getFirstName() . ' ' . $profData->getLastNameOne() . ' ' . $profData->getLastNameTwo();

      $ssCity = self::compateCity($profesionalData);


      $ssApproval = 'Nueva desaprobación de <strong> <a href="colaboradores/' . $snUserId . '/List_ver">' . ($ssGuardUser->getUsername()) . '</a> </strong> en el Directorio.';
      // $ssApproval = 'El profesional ' . $ssProfFullName . ' ha bajado su <a href=/backend.php/profesionales/' . $snIdprofesional . '><strong>rendimiento</strong>.</a>';
      AlertasTable::nueva(8, 'Recomendación', $ssApproval);
      // $ssApproval = 'El profesional ' . $ssProfFullName . ' ha bajado su <a href=/backend.php/profesionales/' . $snIdprofesional . '><strong>rendimiento</strong>.</a>';
      // AlertasTable::nueva(10, 'Desaprobación', $ssApproval);

      /* $ssTipo = $profesionalData->getProfesionalTipoTres()->getId() ? $profesionalData->getProfesionalTipoTres() : $profesionalData->getProfesionalTipoDos();
        $ssDesaprobado = '<a href="cartas_pendientes/'.$oProfesionalLetter->getId().'">desaprobado</a>';
        $ssDisApproval = ' <strong> <a href="profesionales/'.$profesionalData->getId().'">'.($ssProfFullName).'</a> </strong> ha '.$ssDesaprobado.' al profesional '.$ssProfFullName.' de la actividad ['.$ssTipo.'] en '.$ssCity;
        AlertasTable::nueva(11, 'desaprobado', $ssDisApproval); */
    }
  }

  public function getArrFechasReactivaciones() {
    $fechas = Doctrine::getTable('ProfesionalHistorico')->findByProfesionalIdAndEstadoInicial($this->getId(), 10);

    $arr = array();
    foreach ($fechas as $fecha) {
      $arr[] = $fecha->date;
    }

    return $arr;
  }

  public function getArrFechasRevisiones() {
    $fechas = Doctrine::getTable('ProfesionalHistorico')->findByProfesionalIdAndEstadoFinal($this->getId(), 10);

    $arr = array();
    foreach ($fechas as $fecha) {
      $arr[] = $fecha->date;
    }

    return $arr;
  }

  public function isProfesionalDestacadoTiempo($tiempo) {
    $query = Doctrine::getTable("ProfesionalDestacadosTemporales")->createQuery()->where("profesional_id=?", $this->id)->andWhere("tipo_tiempo_id=?", $tiempo);

    if ($query->count()) {
      return true;
    }

    return false;
  }

  /* public function getReferendumResult($limit=null)
    {
    $q = Doctrine_Query::create()
    ->select('c.contribucion_id as contribucion_id, u.id as user_id, u.username as username, o.concurso_id as concurso_id, o.name as contribucion_name, SUM(value) as puntos, COUNT(value) as votos')
    ->from('ConcursoReferendum c')
    ->innerJoin('c.Contribucion o')
    ->innerJoin('o.User u')
    ->where('concurso_id='.$this->getId())
    ->groupBy('contribucion_id')
    ->orderBy('puntos desc, votos desc');

    if ($limit)
    {
    $q->limit($limit);
    }


    return $q->setHydrationMode(DOCTRINE::HYDRATE_ARRAY)->execute();
    } */

  public function isDestacada() {
    $values = array();
    if ($this->isDestacadaPorSector())
      $values[] = 'A';
    if ($this->isDestacadaPorProvincia())
      $values[] = 'P';
    if ($this->isDestacadaPorLocalidad())
      $values[] = 'L';
    if ($this->isDestacadaPorSectorProvincia())
      $values[] = 'AP';
    if ($this->isDestacadaPorSectorLocalidad())
      $values[] = 'AL';

    return implode(',', $values);
  }

  public function isDestacadaPorLocalidad() {
    return ProfesionalDestacadaTable::getInstance()->existByIdAndLocalidad($this->getId()) ? true : false;
  }

  public function isDestacadaPorSector() {
    return ProfesionalDestacadaTable::getInstance()->existById($this->getId()) ? true : false;
  }

  public function isDestacadaPorSectorProvincia() {
    return ProfesionalDestacadaTable::getInstance()->existBySectorAndProvincia($this->getId()) ? true : false;
  }

  public function isDestacadaPorSectorLocalidad() {
    return ProfesionalDestacadaTable::getInstance()->existBySectorAndLocalidad($this->getId()) ? true : false;
  }

  public function isDestacadaPorProvincia() {
    return ProfesionalDestacadaTable::getInstance()->existByIdAndProvincia($this->getId()) ? true : false;
  }

  public function getDestacadosPorSector() {
    return ProfesionalDestacadaTable::getInstance()->getProfesionalSector($this);
  }

  public function getDestacadosPorProvincia() {
    return ProfesionalDestacadaTable::getInstance()->getProfesionalProvincia($this->getStatesId());
  }

  public function getDestacadosPorLocalidad() {
    return ProfesionalDestacadaTable::getInstance()->getProfesionalLocalidad($this->getCityId());
  }

  public function getDestacadosPorSectorAndProvincia() {
    return ProfesionalDestacadaTable::getInstance()->getProfesionalSectorAndProvincia($this);
  }

  public function getDestacadosPorSectorAndLocalidad() {
    return ProfesionalDestacadaTable::getInstance()->getProfesionalSectorAndLocalidad($this);
  }

  public function getStateName() {
    return $this->getStates()->getName();
  }

  public function getCityName() {
    return $this->getCity()->getName();
  }

  public function getActivityName() {
//return $this->getProfesionalTipoTres()->getName();
    return $this->getProfesionalTipoTres()->getId() ? $this->getProfesionalTipoTres() : $this->getProfesionalTipoDos();
  }

  public function getActivityTres() {
//return $this->getProfesionalTipoTres()->getName();
    return $this->getProfesionalTipoTres();
  }

  public static function compateCity($profesionalData = '') {
    /* $ssCity = '.';
      if(!in_array($profesionalData->getStates()->getName(), array('Ceuta', 'Melilla', 'Toda España')))
      $ssDate = ' location ('.$profesionalData->getStates()->getName().')]';
      else
      $ssDate = ' location '.$profesionalData->getStates()->getName().']'; */
    if ($profesionalData && $profesionalData->getStates()) {
      $ssCity = cp::isStateCapital($profesionalData->getStates()->getName(), $profesionalData->getCity()->getName()) ? $profesionalData->getStates()->getName() : '[' . $profesionalData->getStates()->getName() . ']';
      return $ssCity;
    } else {
      return NULL;
    }
  }

  public function getCpMunicipioProvinciaCongi() {
//si no hay localidad (caso solo para "toda españa") devuelve la provincia.
    $html = '';

    if ($this->getCity()->getIsCapital()) {
      $html .= $this->getCity();

      return $html;
    } else {
      $html .= $this->getCity() . ' (';
      $html .= $this->getStates() . ')';
      return $html;
    }

    return $this->getCity();
  }

  public function getUniqueSlug($slug) {
    $num_empresa_lista_blanca = Doctrine::getTable('Profesional')
            ->createQuery('p')
            ->where('slug = ?', $slug)
            ->count();
    return $num_empresa_lista_blanca;
//  echo $num_empresa_lista_blanca; exit;
  }

  public function getCheckStates($states_id) {
    $states_name = Doctrine_Query::create()
            ->select('s.name')
            ->from('States s')
            ->where('id', $states_id)
            ->fetchOne();
    return $states_name['name'];
  }

  public function getCheckCity($city_id) {
    $city_name = Doctrine::getTable('City')->find($city_id);
    return $city_name;
  }

  public function getCheckTipo($road_type_id) {
    $tipo_name = Doctrine_Query::create()
            ->select('r.name')
            ->from('RoadType r')
            ->where('id', $road_type_id)
            ->fetchOne();
    return $tipo_name['name'];
  }

}
