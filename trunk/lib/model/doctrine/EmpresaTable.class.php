<?php

/**
 * EmpresaTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EmpresaTable extends Doctrine_Table {

    static $valida_choices = array(0 => 'Pendiente de revisar', 1 => 'Revisada');

    /**
     * Join as States EmpresaSectorUno EmpresaSectorDos EmpresaSectorTres Localidad
     * @param type $query
     * @return type 
     */
    public static function doSelectJoinStates($query) {
        $rootAlias = $query->getRootAlias();
        $query = $query->select($rootAlias . '.*, esu.name')->leftJoin($rootAlias . '.EmpresaSectorUno esu');
        $query->select($rootAlias . '.*, esd.name')->leftJoin($rootAlias . '.EmpresaSectorDos esd');
        $query->select($rootAlias . '.*, est.name')->leftJoin($rootAlias . '.EmpresaSectorTres est');
        $query->select($rootAlias . '.*, l.name')->leftJoin($rootAlias . '.Localidad l');
        return $query->select($rootAlias . '.*, s.name')->leftJoin($rootAlias . '.States s');
    }

    /**
     * Returns an instance of this class.
     *
     * @return object EmpresaTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Empresa');
    }

    public function findEmpresaByName($name, $limit = 10) {
        return Doctrine_Core::getTable('Empresa')
                        ->createQuery('c')
                        ->where("name LIKE '%{$name}%'")
                        ->limit($limit)
                        ->execute();
    }

    public function getAutocompleteDireccion($q, $limit = 10) {
        return $this->createQuery('q')
                        ->select('q.id, q.direccion')
                        ->where("direccion LIKE '%{$q}%' ")
                        ->limit($limit)
                        ->fetchArray();
    }

    public function getAutocompleteName($q, $limit = 10) {
        return $this->createQuery('q')
                        ->select('q.id, q.name')
                        ->where("name LIKE '%{$q}%' ")
                        ->limit($limit)
                        ->fetchArray();
    }

    /**
     * Devuelve la query con la lista de empresas de la lista $lista
     *
     * @param string $lista | lb => lista_blanca, ln => lista_negra, ninguna
     * @param string $sector1
     * @param string $sector2
     * @param string $sector3
     * @param Doctrine_Collection|null $empresasDestacadas
     * @return Doctrine_Query
     */
    public function getListaQuery($lista = 'lb', $sector1 = null, $sector2 = null, $sector3 = null, Doctrine_Collection $empresasDestacadas = null) {
        $q = $this->createQuery('q')->where('q.lista = ?', $lista);
        $q->leftJoin('q.EmpresaSectorUno s1');
        $q->leftJoin('q.EmpresaSectorDos s2');
        $q->leftJoin('q.EmpresaSectorTres s3');

        if ($sector1 && is_string($sector1)) {
            $q->andWhere('s1.slug = ?', $sector1);
        }
        if ($sector2 && is_string($sector2)) {
            $q->andWhere('s2.slug = ?', $sector2);
        }
        if ($sector3 && is_string($sector3)) {
            $q->andWhere('s3.slug = ?', $sector3);
        }

        if (!is_null($empresasDestacadas)) {
            $ids = array();
            foreach ($empresasDestacadas as $empresa) {
                $ids[] = $empresa->getId();
            }
            $q->andWhereNotIn('q.id', $ids);
        }
        $q->addOrderBy("q.name");
        return $q;
    }

    /**
     * Devuelve la lista de empresas en la lista blanca.
     *
     */
    public function getListaBlancaQuery($sector1 = false, $sector2 = false, $sector3 = false, Doctrine_Collection $empresasDestacadas = null) {
        return $this->getListaQuery('lb', $sector1, $sector2, $sector3, $empresasDestacadas);
    }

    /**
     * Devuelve la lista de empresas en la lista negra.
     *
     */
    public function getListaNegraQuery($sector1 = false, $sector2 = false, $sector3 = false, Doctrine_Collection $empresasDestacadas = null) {
        return $this->getListaQuery('ln', $sector1, $sector2, $sector3, $empresasDestacadas);
    }

    /**
     * Devuelve las empresas destacadas según el sector, localidad o provincia
     *
     * @return Doctrine_Collection
     */
    public function getListaBlancaDestacados(array $options) {
        $q = Doctrine_Query::create()->from('Empresa e')
                ->innerJoin('e.EmpresaDestacada ed')
                ->orderBy('ed.rank ASC');
        $filter = false;


        if (!empty($options['name'])) {
            $filterName = false;
            $q->where('e.name LIKE ?', '%' . $options['name'] . '%');
            if (!empty($options['sector3'])) {
                $q->leftJoin('ed.EmpresaSectorTres s3')
                        ->andWhere('s3.slug = ?', $options['sector3']);
                $filterName = true;
            } elseif (!empty($options['sector2'])) {
                $q->leftJoin('ed.EmpresaSectorDos s2')
                        ->andWhere('s2.slug = ?', $options['sector2']);
                $filterName = true;
            } elseif (!empty($options['sector1'])) {
                return new Doctrine_Collection('EmpresaDestacada');
            }

            if (!empty($options['localidad_id'])) {
                $q->andWhere('ed.localidad_id = ?', $options['localidad_id']);
                if ($filterName) {
                    $q->andWhere('ed.combinado = ?', Empresa::COMBINADO_LOCALIDAD);
                } else {
                    $q->andWhere('ed.combinado = ?', Empresa::COMBINADO_NULO);
                }
            } elseif (!empty($options['states_id'])) {
                $q->andWhere('ed.states_id = ?', $options['states_id']);
                if ($filterName) {
                    $q->andWhere('ed.combinado = ?', Empresa::COMBINADO_PROVINCIA);
                } else {
                    $q->andWhere('ed.combinado = ?', Empresa::COMBINADO_NULO);
                }
            }

            if ($options['categoria_excelencia'] != null) {
                $values = $options['categoria_excelencia'];
                $medalla_var_min_values = array();
                $medalla_var_max_values = array();
                if ($values == 'ninguno') {
                    $values = 'Sin medalla';
                }
                $medalla_values = Doctrine::getTable('CategoriaExcelencia')->createQuery()
                        ->select('valor_min', 'valor_max')
                        ->Where('nombre=?', $values)
                        ->execute();
                foreach ($medalla_values as $data):
                    $medalla_var_min_values[$values] = $data->getValorMin();
                    $medalla_var_max_values[$values] = $data->getValorMax();
                endforeach;
                if ($values != null) {
                    $q->addWhere("(dividendo/divisor) > " . $medalla_var_min_values[$values] . " and (dividendo/divisor) < " . $medalla_var_max_values[$values]);
                }
            }
            //al buscar por nombre ordena alfabéticamente...
            $q->orderBy('e.name ASC');

            return $q->execute();
        }



        if (!empty($options['sector3'])) {
            $q->leftJoin('ed.EmpresaSectorTres s3')
                    ->andWhere('s3.slug = ?', $options['sector3']);
            $filter = true;
        } elseif (!empty($options['sector2'])) {
            $q->leftJoin('ed.EmpresaSectorDos s2')
                    ->andWhere('s2.slug = ?', $options['sector2']);

            $filter = true;
        } elseif (!empty($options['sector1'])) {
            $filter = true;
        }


        if ($options['categoria_excelencia'] != null) {
            $values = $options['categoria_excelencia'];
            $medalla_var_min_values = array();
            $medalla_var_max_values = array();
            if ($values == 'ninguno') {
                $values = 'Sin medalla';
            }
            $medalla_values = Doctrine::getTable('CategoriaExcelencia')->createQuery()
                    ->select('valor_min', 'valor_max')
                    ->Where('nombre=?', $values)
                    ->execute();
            foreach ($medalla_values as $data):
                $medalla_var_min_values[$values] = $data->getValorMin();
                $medalla_var_max_values[$values] = $data->getValorMax();
            endforeach;

            if ($values != null) {
                $q->addWhere("(dividendo/divisor) > " . $medalla_var_min_values[$values] . " and (dividendo/divisor) < " . $medalla_var_max_values[$values]);
            }
        }
        // si se filtra por sector, no se filtra destacados por nada más, sinó que se filtran los resultados de ese sector destacado
        if ($filter) {
            if (!empty($options['sector1']) && empty($options['sector2'])) {
                return new Doctrine_Collection('EmpresaDestacada');
            }
            if (!empty($options['localidad_id'])) {
                $q->andWhere('ed.combinado = ?', Empresa::COMBINADO_LOCALIDAD)
                        ->andWhere('ed.localidad_id = ?', $options['localidad_id']);
            } elseif (!empty($options['states_id'])) {
                $q->andWhere('ed.combinado = ?', Empresa::COMBINADO_PROVINCIA)
                        ->andWhere('ed.states_id = ?', $options['states_id']);
            } else {
                $q->andWhere('ed.combinado = ?', Empresa::COMBINADO_NULO);
            }


            return $q->execute();
        }

        //si no se filtra por sector, filtramos por localidad o provincia en destacados
        if ($options['order'] == 'localidad') {
            //casos especiales Ceuta, Melilla y Toda España
            if ($options['states_id'] == 16 || $options['states_id'] == 35 || $options['states_id'] == 1) {
                $q->andWhere('ed.states_id = ?', $options['states_id'])
                        ->andWhere('ed.combinado = ?', Empresa::COMBINADO_NULO);
                return $q->execute();
            }
        }
        if ($options['localidad_id'] != '') {
            $q->andWhere('ed.localidad_id = ?', $options['localidad_id'])
                    ->andWhere('ed.combinado = ?', Empresa::COMBINADO_NULO);
            return $q->execute();
        } elseif (!empty($options['states_id']) && $options['localidad_id'] == '') {
            $q->andWhere('ed.states_id = ?', $options['states_id'])
                    ->andWhere('ed.combinado = ?', Empresa::COMBINADO_NULO);
            return $q->execute();
        }

        return new Doctrine_Collection('EmpresaDestacada');
    }

    /**
     * fetch Audit Query object for audit made by given user
     * @param String $user_id User Id
     * @return Doctrine_Query
     */
    public function getAuditQuery($user_id) {
        //create audit query
        $audit_query = Doctrine_Query::create()
                ->select('DISTINCT (e.id), e.*')
                ->from('Empresa e')
                ->leftJoin('e.CuestionarioRespuestas cr')
                ->where('cr.user_id =?', $user_id)
                ->orderby('cr.created_at DESC');
        //retrun audit query
        return $audit_query;
    }

    /**
     * fetch Audit records for given company and user
     * @param String $user_id User Id
     * @param String $company_id Company id
     * @return Reocrds
     */
    public function getUserAuditRecords($user_id, $company_id) {
        //create audit query
        $audit_query = Doctrine_Query::create()
                ->select('e.id,e.slug, cr.id,cr.created_at created_date')
                ->from('ListaCuestionarioUser cr')
                ->leftJoin('cr.Empresa e')
                ->where('cr.user_id =?', $user_id)
                ->andWhere('e.id =?', $company_id)
                ->orderby('cr.created_at DESC');

        //retrun audit query
        return $audit_query->fetchArray();
    }

    /**
     * fetch query for company favourit list for given user id
     * @param String $user_id User id
     * @return Doctrine_Query
     */
    public function getFavouritCompany($user_id) {
        //create company favourit list query
        $comapny_favourit_list_query = Doctrine_Query::create()
                ->from('Empresa e')
                ->leftJoin('e.ComapnyFavouriteList cfl')
                ->where('cfl.user_id =?', $user_id)
                ->orderby('cfl.created_at DESC');
        //return query
        return $comapny_favourit_list_query;
    }

    /**
     * fetch comment records for given  user
     * @param String $user_id User Id
     * @return Reocrds
     */
    public function getCommentsQuery($user_id) {
        //create comment query
        $comment_query = Doctrine_Query::create()
                ->from('Empresa e')
                ->leftJoin('e.ComentariosListaNegra cln')
                ->where('cln.sf_guard_user_id =?', $user_id)
                ->orderby('cln.created_at DESC');

        //retrun audit query
        return $comment_query;
    }

    /**
     * fetch comment records for given company and user
     * @param String $user_id User Id
     * @return Reocrds
     */
    public function getCommentsRecords($user_id, $company_id) {
        //create comment query
        $comment_query = Doctrine_Query::create()
                ->select('e.id,e.slug, cln.id,cln.created_at created_date')
                ->from('ComentarioListaNegra cln')
                ->leftJoin('cln.Empresa e')
                ->where('cln.sf_guard_user_id =?', $user_id)
                ->andWhere('cln.empresa_id =?', $company_id)
                ->orderby('cln.created_at DESC');

        //retrun audit query
        return $comment_query->fetchArray();
    }

    /**
     * fetch featured company by given contest type
     * for home page
     * @return Array
     */
    public function getFeatureCompanyRecords($list_type = 'lb') {
        //create featured company records query
        $featured_company_record_query = Doctrine_Query::create()
                ->from('Empresa e')
                ->where('e.featured = 1')
                ->andWhere('e.lista =?', $list_type)
                ->orderBy('e.featured_order ASC, e.created_at DESC')
                ->limit(10);
        //fetch records
        $featured_company_record = $featured_company_record_query->execute();
        //return records
        return $featured_company_record;
    }

    /**
     * Fetch all direction records
     * @return Array Direction Array
     */
    public function getAllDirections() {
        //creat all direction query
        $all_direction_query = Doctrine_Query::create()
                ->select('e.direccion')
                ->from('Empresa e');

        //get all direction records
        $all_direction_record = $all_direction_query->fetchArray();

        //create direction array
        $direction_array = array();
        foreach ($all_direction_record as $direction_record) {
            $direction_array[$direction_record['direccion']] = $direction_record['direccion'];
        }

        //retrun records
        return $direction_array;
    }

    /**
     * Fetch the company featured limit
     * It will help Admin to publish while list company on home page
     * if company featured limit is not more than 10
     * @param $list_type List Type 
     * @return Array
     */
    public function getFeatreudLimit($list_type = 'lb') {
        //create company featured limit query
        $company_feature_limit_query = Doctrine_Query::create()
                ->select('COUNT(e.id) contest_limit')
                ->from('Empresa e')
                ->where('e.featured = 1')
                ->andWhere('e.lista =?', $list_type);
        //fetch limit
        return $company_feature_limit_query->fetchArray();
    }

    /**
     * Fetch all product names
     * @return Array
     */
    public function getAllCompanyNames() {
        //create all company names query
        $all_company_names_query = Doctrine_Query::create()
                ->select('e.name')
                ->from('Empresa e');
        $all_company_records = $all_company_names_query->fetchArray();
        //create company names array
        $company_names_array = array('' => '');
        //add each company names
        foreach ($all_company_records as $company_record) {
            $company_names_array[$company_record['name']] = $company_record['name'];
        }
        //return company names array
        return $company_names_array;
    }

}