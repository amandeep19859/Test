<?php

/**
 * sfGuardUserProfile
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    symfony
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class sfGuardUserProfile extends BasesfGuardUserProfile {

    const AMBOS = '1';
    const ACCUMULATED = '2';
    const REDEEMABLED = '3';

    public function getFullname() {
        return $this->getName() . ' ' . $this->getSurname1() . ' ' . $this->getSurname2();
    }

    public function getUserName() {
        return $this->getUser()->getUsername();
    }

    /**
     * Añade los puntos indicados al usuario (rank y changepoints)
     *
     * @param integer $p
     * @param String $point_type
     */
    public function setPuntos($p, $point_type = sfGuardUserProfile::AMBOS) {
        if ($point_type == sfGuardUserProfile::AMBOS || $point_type == sfGuardUserProfile::ACCUMULATED) {
            $this->setAccumulatedPoints($this->getAccumulatedPoints() + $p);
        }
        if ($point_type == sfGuardUserProfile::AMBOS || $point_type == sfGuardUserProfile:: REDEEMABLED) {
            $this->setChangePoints($this->getChangePoints() + $p);
        }
        //$this->setMoney(number_format(($this->getChangePoints()/100), 2, '.', ''));

        $this->save();
    }

    /**
     * Perform cash operation according to given value and operation
     * @param String $q Value
     * @param String $s Sign
     */
    public function setCaja($q = 0, $s = '+') {
        //if sign is for negation
        if ($s == '-') {
            $q = -($q);
        }
        //if value is in plus add value to cash and accumalated cash
        if ($q > 0) {
            $this->setMoneySum($q + $this->getMoneySum());
            $this->setMoney($this->getMoney() + $q);
        }
        //deduct value from cash only
        else {
            $this->setMoney($this->getMoney() + $q);
        }
        //save record
        $this->save();
    }

    public function setFrontrndImage($image) {
        $this->_set('image', $image);
    }

    public function setImage($image, $raw = '') {
        if (is_object($image) and 'sfValidatedFile' == get_class($image)) {
            try {
                $basename = sha1(microtime() . rand()) . $image->getExtension($image->getOriginalExtension());
                $fullname = sfConfig::get('sf_users_dir') . '/' . $basename;
                $saved = empty($raw) ? $image->save($fullname) : file_put_contents($fullname, $raw);
                if (FALSE !== $saved) {
                    $thumb = new sfThumbnail(52, 52, true, false, 75, 'sfGDAdapter');
                    $thumb->loadFile($fullname);
                    $thumb->save($fullname);
                    $this->_set('image', $basename);
                    return true;
                }
            } catch (Exception $e) {
                
            }
        }
        return false;
    }

    function getPos($c = 'money_sum') {
        $q = new Doctrine_Query();
        $result = $q->from("sfguarduser u")->leftJoin('u.Profile p ON u.id = p.user_id')->orderBy('p.' . $c . ' desc')->groupBy('id')->fetchArray();
        foreach ($result as $i => $row)
            if ($this->getUserId() == $row['id'])
                return ($i + 1);

        return 0;
    }

    public function getProximoComentario($object) {
        $class = strtolower(get_class($object));
        //  $interval = DateInterval::createFromDateString(sfConfig::get('app_auditorias_intervaloRepeticion', '1 month'));
        $q = Doctrine_Query::create()
                ->addFrom('ComentarioListaNegra l')
                ->select('l.updated_at')
                ->andWhere('l.sf_guard_user_id = ?', $this->getUserId())
                ->andwhere('l.' . $class . '_id = ?', $object->getId())
                ->orderBy('l.created_at', 'desc')
                ->execute(null, DOCTRINE::HYDRATE_SINGLE_SCALAR);
        //   $result = $q->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);

        if (is_array($q)) {
            $ultimaFecha = end($q);
        } else {
            $ultimaFecha = $q;
        }
        $dates = strtotime(date("Y-m-d", strtotime($ultimaFecha)) . " +" . sfConfig::get('app_auditorias_intervaloRepeticion', '30 Days'));
        $time = date("Y-m-d H:i:s", $dates);
        $date = new DateTime($time);
        if (null == $ultimaFecha) {
            return date('d-M-Y');
        }
        //return $date->add($interval);
        return $date;
    }

    public function isCanjeable() {
        $error = 0;
        if ($this->getMetodoCobroId() != 2 && $this->getMetodoCobroId() != 3)
            $error = 'Has solicitado hacer caja <b>sin indicar correctamente un método de cobro</b> de recompensas.<br>
                          Por favor, indica un método  de cobro de recompensas válido en   <b>Mi cuenta – Datos de facturación.</b><br><br>
                          Muchas gracias por tu colaboración.';

        return $error;
    }

    public function isCashUp() {
        if (floor($this->getMoney()) < 30) {
            return 1;
        } else {
            return 0;
        }
    }

    /**
     * Devuelve la fecha de la próxima auditoría para una empresa o producto concreta
     *
     */
    public function getProximaAuditoria($objeto) {
        //$interval = DateInterval::createFromDateString(sfConfig::get('app_auditorias_intervaloRepeticion', '30 Days'));
        $id = '';
        if (sfContext::getInstance()->getModuleName() == 'listaBlancaProducto') {
            $id = 'l.producto_id = ?';
        } else {
            $id = 'l.empresa_id = ?';
        }
        $q = Doctrine_Query::create()
                ->addFrom('ListaCuestionarioUser l')
                ->select('l.created_at')
                ->where('l.lista_cuestionario_id = ?', $objeto->getCuestionario()->getId())
                ->andWhere($id, $objeto->getId())
                ->andWhere('l.user_id = ?', $this->getUserId())
                ->orderBy('l.created_at', 'desc')
                ->execute(null, DOCTRINE::HYDRATE_SINGLE_SCALAR);
        //$result = $q->fetchOne(array(), Doctrine_Core::HYDRATE_ARRAY);
        //$ultimaFecha = $result['updated_at'];
        if (is_array($q) && empty($q)) {
            $time = date("Y-m-d H:i:s", time());
            return $date = new DateTime($time);
        }
        if (is_array($q)) {
            $ultimaFecha = end($q);
        } else {
            $ultimaFecha = $q;
        }
        $dates = strtotime(date("Y-m-d", strtotime($ultimaFecha)) . " +" . sfConfig::get('app_auditorias_intervaloRepeticion', '30 Days'));
        $time = date("Y-m-d H:i:s", $dates);
        $date = new DateTime($time);
        if (null == $ultimaFecha) {
            $time = date("Y-m-d H:i:s", time());
            return $date = new DateTime($time);
        }
        //return $date->add($interval);
        return $date;
    }

    public function getCityId() {
        if ($this->getStatesId() == 16) //ceuta
            return 5884;
        elseif ($this->getStatesId() == 35) //melilla
            return 5885;
        else
            return $this->_get('city_id');
    }

    /**
     * return processed money sum value
     * @return float
     */
    public function getMoneySum() {
        $money = $this->_get('money_sum');

        if (floor($money) == ceil($money)) {
            return intval($money);
        } else {
            return $money;
        }
    }

    /**
     * return processed money value
     * @return float
     */
    public function getMoney() {
        $money = $this->_get('money');
        if (floor($money) == ceil($money)) {
            return intval($money);
        } else {
            return $money;
        }
    }

}

